{"version":3,"sources":["webpack:///./src/utils.ts","webpack:///./src/app/index.tsx","webpack:///./src/ui/css/base.ts","webpack:///./src/ui/components/common/Pagination/index.tsx","webpack:///./src/ui/hooks/responsive/index.tsx","webpack:///./src/reducers/slices/app/index.tsx","webpack:///./src/reducers/slices/domain/anime.ts","webpack:///./src/states/state.ts","webpack:///./src/selectors/selector.ts","webpack:///./src/reducers/slices/domain/categories.ts","webpack:///./src/ui/components/common/icons/CloseI.tsx","webpack:///./src/ui/components/common/CategoryFilter/index.tsx","webpack:///./src/ui/components/common/icons/SortI.tsx","webpack:///./src/ui/components/common/SearchController/index.tsx","webpack:///./src/ui/hooks/outsideClick/index.tsx","webpack:///./src/ui/components/common/AnimeDetailForLarge/index.tsx","webpack:///./src/ui/components/common/Anime/index.tsx","webpack:///./src/ui/components/common/AnimeDetailForSmall/index.tsx","webpack:///./src/ui/components/common/Loading/index.tsx","webpack:///./src/ui/components/common/SearchResult/index.tsx","webpack:///./src/ui/components/common/icons/SwipeArrowI.tsx","webpack:///./src/ui/components/common/SwipeAnimation/index.tsx","webpack:///./src/ui/components/pages/Search/index.tsx","webpack:///./src/ui/components/pages/Content/index.tsx","webpack:///./src/reducers/slices/ui/index.ts","webpack:///./src/reducers/rootReducer.ts","webpack:///./src/sideEffects/workers/requestUrlCheckWorker.ts","webpack:///./src/sideEffects/workers/fetchAnimeWorker.tsx","webpack:///./src/sideEffects/workers/fetchCategoryWorker.tsx","webpack:///./src/sideEffects/workers/leftNavMenuWorker.tsx","webpack:///./src/sideEffects/watchers/index.tsx","webpack:///./src/configs/storeConfig.ts","webpack:///./src/sideEffects/rootSaga.ts","webpack:///./src/ui/contexts/cssGlobal/index.tsx","webpack:///./src/index.tsx","webpack:///./src/ui/components/common/Loading/style.scss?8884","webpack:///./src/ui/components/common/Loading/style.scss"],"names":["dateFormatOption","year","month","day","toStringToDateToString","dateStr","Date","toLocaleDateString","FetchStatusEnum","calculateMaxPageNumber","total","limit","Math","ceil","generatePageLinkSlice","begin","end","pageLinks","i","push","num","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","mobileOnly","tabletOnly","laptopOnly","lteTablet","lteLaptop","GlobalStyle","BaseInputStyle","BaseInputBtnStyle","ShowUpKeyFrames","PaginationBox","div","PaginationContent","PaginationBtn","button","props","active","curPage","offset","maxPage","btnNum","leftNum","floor","rightNum","maxPageNum","generatePaginationLink","length","value","key","onClick","map","page","size","currentScreenWidth","window","innerWidth","currentScreenHeight","innerHeight","isMobile","isTablet","isLaptop","isDesktop","isLTETablet","isLTELaptop","isLandscape","isTouchDevice","navigator","maxTouchPoints","msMaxTouchPoints","currentScreenSize","setScreenSize","handleScreenWidth","addEventListener","removeEventListener","JSON","stringify","clearAllSortAndFilterActionCreator","searchKeywordSlice","type","name","initialState","reducers","update","state","action","clear","extraReducers","builder","addCase","searchKeywordSliceReducer","reducer","searchKeywordActions","actions","fetchStatusSlice","fetchStatusSliceReducer","fetchStatusActions","categoryFetchStatusSlice","categoryFetchStatusSliceReducer","categoryFetchStatusActions","curCategorySlice","id","attributes","title","description","curCategorySliceReducer","curCategoryActions","curCategorySearchKeywordSlice","curCategorySearchKeywordSliceReducer","curCategorySearchKeywordActions","curSortSlice","curSortSliceReducer","curSortActions","sortListSlice","label","sortListSliceReducer","requestTrackerSlice","requestTrackerSliceReducer","requestTrackerActions","fetchAnimeActionCreator","fetchAnimeActionTypeName","updateAnimeDataSlice","merge","updateAnimeDataSliceReducer","updateAnimeDataActions","updateAnimePaginationDataSlice","updateAnimePaginationDataSliceReducer","updateAnimePaginationDataActions","updateAnimeCurItemsDataSlice","updateAnimeCurItemsDataSliceReducer","updateAnimeCurItemsDataActions","animeSchemaEntity","Entity","animeSchemaArray","Array","ui","leftNavMenu","rightNavMenu","searchModal","app","searchKeyword","fetchStatus","INITIAL","categoryFetchStatus","curCategory","curCategorySearchKeyword","curSort","sortList","requestTracker","domain","animes","data","pagination","curItems","categories","rsSelector","getLeftNavMenu","getRightNavMenu","getSearchModal","getSearchKeyword","getFetchStatus","getCurCategory","getCurCategorySearchKeyword","getCurSort","getSortList","getRequestTracker","getDomain","getAnimeData","getAnimePaginationData","getAnimeCurItemsData","getCategoryData","mSelector","keyword","Object","keys","filter","anime","includes","categoryKeyword","category","toUpperCase","indexOf","slice","fetchCategoryActionCreator","fetchCategoryActionTypeName","categoryDataSlice","categoryDataSliceReducer","categoryDataActions","color","viewBox","fill","xmlns","className","d","CategorySearchInputBox","CategorySearchInput","input","CategoryResetIcon","CategorySearchResultBox","CategorySearchInnerBox","CategoryFilterTile","h3","CategoryItem","dispatch","categorySearchInputRef","handleCategorySelectionClickEvent","e","current","parseInt","currentTarget","getAttribute","nextCurCategory","find","setCategorySuggestionShow","isCategorySuggestionShow","curSelectedCategorySuggestionItemIndex","setSelectedCategorySuggestionItemIndex","placeholder","onChange","nextCategorySearchKeyword","onKeyDown","prev","ref","index","width","height","SearchInputBox","SearchInput","AdditionalControllerBox","open","AdditionalControllerCloseBtn","SortBox","SortItemList","SortItem","SortTitle","SortLabel","responsive","curSearchKeyword","handleSortItemChangeEvent","nextSort","sort","isAdditionalControllerOpen","setAdditionalControllerOpen","additionalControllerRef","callback","handleOutsideClickEvent","contains","target","document","nextKeyword","localeCompare","style","display","checked","htmlFor","AnimeTitle","h2","AnimeReleased","p","AnimeAverageRating","AnimeTrailerLink","a","AnimeDescription","canonicalTitle","startDate","averageRating","href","youtubeVideoId","AnimeImage","img","AnimeImageHelper","span","curAnimeListRefs","handleAnimeClickEvent","el","src","posterImage","small","alt","titles","en","medium","large","AnimeDetailControllerBox","AnimeDetailCloseBtn","curSelectedAnime","handleAnimeDetailBoxCloseEvent","role","NoResultBox","NoResultMessage","ClearAllSortAndFilterBtn","ItemList","curAnimes","curScrollPosXRef","curTouchStart","handleTouchStartEvent","touches","clientX","handleTouchMoveEvent","curTouchEnd","maxWidth","scrollWidth","clientWidth","transform","transition","isAnimeDetailModalOpen","setAnimeDetailModalOpen","setSelectedAnime","nextAnimeId","nextAnime","isLoading","FETCHING","FAILED","SUCCESS","onTouchStart","onTouchMove","onWheel","deltaY","Box","InnerBox","AnimatedSwipeArrowI","Message","SearchBox","curPagination","isPageUpdated","setPageUpdated","nextPagination","toggleLeftNavMenuActionTypeName","toggleLeftNavMenuActionCreator","leftNavMenuSlice","close","toggle","leftNavMenuSliceReducer","leftNavMenuActions","rightNavMenuSlice","rightNavMenuSliceReducer","searchModalSlice","searchModalSliceReducer","rootReducer","requestUrlCheckWorker","targetUrl","requestTrackerState","prototype","hasOwnProperty","call","fetchAnimeWorker","curKeyword","targetRequestTrackerBase","ids","method","url","response","normalizedData","entities","meta","count","result","console","log","fetchCategoryWorker","leftNavMenuWorkerWorker","leftNavMenuWatcher","fetchAnimeWatcher","fetchCategoryWatcher","sagaMiddleware","middleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","run","sagas","saga","CssGlobalContextDefaultState","headerHeight","mobileSSize","mobileLSize","tabletSize","laptopSize","desktopSize","titleFontSize","subTitleFontSize","regularFontSize","smallFontSize","exSmallFontSize","mainColor","secColor","thirdColor","borderColor","successColor","errorColor","importantColor","confirmationColor","CssGlobalContext","Provider","getElementById","content","module","options","undefined","locals","exports","___CSS_LOADER_API_IMPORT___"],"mappings":"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","file":"app.141f176ff10fb1e0a73d.js","sourcesContent":["//import { QueryStringType } from \"requests/types\";\nconst uuidv4 = require('uuid/v4')\nimport isEmpty from \"lodash/isEmpty\";\nimport { PageLinkType } from 'components/common/Pagination/types';\n\n\nexport const dateFormatOption = { year: 'numeric', month: 'long', day: 'numeric' }\n\n//export const buildQueryString = (queryStringObject: QueryStringType = {}): string => {\n//\n//  if (isEmpty(queryStringObject)) return ''\n//\n//  return '?' + Object.keys(queryStringObject)\n//    .filter(key => queryStringObject[key] !== null && queryStringObject[key] !== undefined && queryStringObject[key].lenth != 0 && queryStringObject[key] != '')\n//    .map(key => {\n//      if (queryStringObject[key] instanceof Date) \n//        return key + '=' + (queryStringObject[key] as Date).toISOString()\n//      if (key === 'category') {\n//        if (queryStringObject[key] instanceof Object) // if category value if object (CategoryType)\n//          return key + '=' + queryStringObject[key].name\n//      }\n//\n//      return key + '=' + queryStringObject[key]\n//    })\n//    .join('&')\n//}\n\nexport function getCookie(name: string): string {\n  const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));\n  if (match) return match[2];\n  else return null;\n}\n\nexport function generateFileWithUuidv4(targetFile: File) {\n  const blob: Blob = targetFile.slice(0, targetFile.size, targetFile.type)\n  return new File([blob], targetFile.name.replace(/.*(?=\\.)/, uuidv4()), { type: targetFile.type })\n}\n\nexport function getUuidv4() {\n  return uuidv4()\n}\n\nexport function getTimeOneHourAfter() {\n  const dt = new Date();\n  dt.setHours(dt.getHours() + 1)\n  return dt.getTime()\n}\n\n/**\n * check two object has the same properties (could have different values for the same properties)\n *  - just check two object has same form (properties) or not\n **/\nexport function isSameObjectForm(a: object, b: object): boolean {\n  let isSame = true\n  Object.keys(a).forEach((key: string) => {\n    if (!b.hasOwnProperty(key)) {\n      isSame = false\n    }\n  })\n  return isSame\n}\n\nexport function transformObject<A extends object, B extends object>(original: A, destination: B): B {\n  if (!isSameObjectForm(original, destination)) {\n\n  }\n  else return destination\n}\n\n/**\n * be careful !!!!\n * January is 0\n * December is 11\n **/\nexport const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nexport function generateQueryString(target: { [key: string]: any }): string {\n  const keys = Object.keys(target)\n  let queryString = \"?\"\n  keys.forEach((key: string) => {\n    queryString += key + \"=\" + target[key] + \"&\"\n  })\n  queryString = queryString.substring(0, queryString.length - 1)\n  return queryString\n}\n\nexport function toStringToDateToString(dateStr: string): string {\n  return new Date(dateStr).toLocaleDateString(\"en-US\", dateFormatOption)\n}\n\nexport function toDateString(date: Date): string {\n  return date.toLocaleDateString(\"en-US\", dateFormatOption)\n}\n\nexport function getRandomNumber(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport function getLatestDate(date1: Date, date2: Date) {\n  return (date1.getDate() < date2.getDate()) ? date2 : date1\n}\n\n/**\n * scroll features (onScroll)\n *\n *  - DEPRECIATED!! dont use this\n *\n **/\n\nexport const getPercentageOfScrollPosition: (curScrollPos: number, maxScrollPos: number, minScrollPos: number) => number = (curScrollPos, maxScrollPos, minScrollPos) => {\n  return ((curScrollPos - minScrollPos) * 100) / (maxScrollPos - minScrollPos)\n}\n\n/**\n * should return the value from \"unitConsistentY = (inner element height) - (unit scroll top (= unitScrollPercentage * 10))\"\n **/\nexport const calcUnitConsistentY: (innerElementHeight: number, unitScrollPercentage: number, elId: number) => number = (innerElementHeight, unitScrollPercentage, elId) => {\n  return -1 * elId * (innerElementHeight - (unitScrollPercentage * 10) + 18)\n}\n\nexport const calcCurGapX: (curScrollPercentage: number, elId: number, unitScrollPercentage: number, length: number, unitGapX: number) => number = (curScrollPercentage, elId, unitScrollPercentage, length, unitGapX) => {\n  // when position Y of this element is above than cur scroll position, we need to decrease the gap scale \n  if ((unitScrollPercentage * elId) <= curScrollPercentage) {\n    return -1 * ((unitGapX / unitScrollPercentage) * curScrollPercentage) + (elId * unitGapX)\n  } else {\n    // when position Y of this element is below than cur scroll position, we need to increase the gap scale\n    return ((unitGapX / unitScrollPercentage) * curScrollPercentage) - (elId * unitGapX)\n  }\n}\n\nexport const calcCurCirleGapX: (curScrollPercentage: number, elId: number, unitScrollPercentage: number, circleGapXCoefficient?: number, radius?: number) => number = (curScrollPercentage, elId, unitScrollPercentage, circleGapXCoefficient = 1, radius = 100) => {\n  return (circleGapXCoefficient) * ((-1 * radius) + Math.sqrt(-1 * Math.pow(curScrollPercentage - (elId * unitScrollPercentage), 2) + Math.pow(radius, 2)))\n}\n\nexport const calcCurScaleGap: (curScrollPercentage: number, elId: number, unitScrollPercentage: number, length: number) => number = (curScrollPercentage, elId, unitScrollPercentage, length) => {\n\n  // when position Y of this element is above than cur scroll position, we need to decrease the gap scale \n  if ((unitScrollPercentage * elId) <= curScrollPercentage) {\n    return (-1 / 100) * curScrollPercentage + (1 + (elId * (1 / (length - 1))))\n  } else {\n    // when position Y of this element is below than cur scroll position, we need to increase the gap scale\n    return (1 / 100) * curScrollPercentage + (1 - (elId * (1 / (length - 1))))\n  }\n}\n\nexport const calcCurVisibility: (curScrollPercentage: number, elId: number, unitScrollPercentage: number, visibleUnitElementNumber: number) => boolean = (curScrollPercentage, elId, unitScrollPercentage, visibleUnitElementNumber) => {\n\n  if ((curScrollPercentage + (visibleUnitElementNumber * unitScrollPercentage) >= (elId * unitScrollPercentage)) && (curScrollPercentage - (visibleUnitElementNumber * unitScrollPercentage) <= (elId * unitScrollPercentage))) {\n    return true\n  } else {\n    return false\n  }\n}\n\nexport const calcCurOverlapY: (curScrollPercentage: number, elId: number, unitScrollPercentage: number, length: number, unitOverlapYCoefficient: number) => number = (curScrollPercentage, elId, unitScrollPercentage, length, unitOverlapYCoefficient) => {\n\n  // curScrollPosition percentage is above than its unit scroll percentage, we need to increase the the gap\n  // also, reverse the sign (+ -> -) for 'translate(-xxpx)'\n  if ((unitScrollPercentage * elId) <= curScrollPercentage) {\n    return unitOverlapYCoefficient * Math.pow((curScrollPercentage - (unitScrollPercentage * elId)), 2)\n  } else {\n    // curScrollPosition percentage is less than its unit scroll percentage, we need to decrease the the gap\n    return (-1) * unitOverlapYCoefficient * Math.pow((curScrollPercentage - (unitScrollPercentage * elId)), 2)\n  }\n}\n\n/**\n * new scroll elements on circle feature (onWheel)\n *\n **/\n\n/**\n * calc the scale of current element. \n *\n *  - if the deg of the element == 0 mod 360, scale = 1\n *  - if the deg of the element == 180 mod 360, scale = 0\n *\n **/\nexport const calcScale: (deg: number, targetZeroDeg?: number) => number = (deg, targetZeroDeg = 90) => {\n\n  //const degModAbs = Math.abs(deg % 360)\n  //const scaleRangeAbs = Math.abs((degModAbs - targetZeroDeg) / 180)\n  //return scaleRangeAbs\n  \n  const scale = 1/2 * Math.cos(convertDegToRadian(deg + targetZeroDeg)) + 1/2\n  if (scale < 1/4) return 1/4\n  return scale\n}\n\n/**\n * calc z-index of the current element\n *\n *  - reuse 'calcScale' since it has the same logic\n *\n **/\nexport const calcZIndex: (deg: number) => number = (deg) => {\n\n  const scaleValue = calcScale(deg);\n\n  /**\n   * scale value must around 8750 (this is the z-index of icon at the center)\n   *\n   *  - 0 <= scaleValue * 100 <= 100\n   *  - 8700 <= (scalevalue * 100 + 8700) <= 8800\n   *\n   **/\n  return Math.round(scaleValue * 100 + 8700)\n}\n\n/**\n * make the element visible when followings:\n *  - (+): deg < 90 and deg > 270\n *  - (-): -90 > deg and -270 < deg\n *\n *  => make this visible only when the element comes in the right side of circle\n **/\nexport const calcVisibility: (deg: number) => boolean = (deg) => {\n\n  const degModAbs = Math.abs(deg % 360)\n  if (degModAbs < 90 || degModAbs > 270) return true;\n  return false;\n}\n\nexport const calcCenterPosX: (offsetLeft: number, clientWidth: number) => number = (offsetLeft, clientWidth) => {\n  // overflow when calc actual centerX so return 0 instead\n  return (clientWidth / 2)\n  //return (clientWidth / 3)\n  //return 0\n}\n\nexport const calcCenterPosY: (offsetTop: number, clientHeigt: number) => number = (offsetTop, clientHeigt) => {\n  // put extra in order to make it center. (e.g., subtract half height of the element size)\n  return (clientHeigt / 2)\n  //return (clientHeigt / 2) - 100;\n}\n\nexport const calcCurPosX: (elId: number, r: number, unitDegree: number, alphaDeg?: number) => number = (elId, r, unitDegree, alphaDeg) => {\n  return r * Math.cos(convertDegToRadian((unitDegree * elId) + alphaDeg))\n}\n\nexport const calcCurPosY: (elId: number, r: number, unitDegree: number, alphaDeg?: number) => number = (elId, r, unitDegree, alphaDeg) => {\n  // need to make it 'minus' since y asix is the opposite to math\n  return (-1) * r * Math.sin(convertDegToRadian((unitDegree * elId) + alphaDeg))\n}\n\nexport const convertDegToRadian: (deg: number) => number = (deg) => {\n  return deg * (Math.PI / 180)\n}\n\n/**\n * calc radiusWidth of ellipse\n *\n **/\nexport const calcRadiusWidth: (maxWidth: number) => number = (maxWidth) => {\n  return maxWidth * 0.7 / 2\n}\n\n/**\n * calc radiusHeight of ellipse\n *\n **/\nexport const calcRadiusHeight: (maxHeight: number) => number = (maxHeight) => {\n  return maxHeight * 0.3 / 2\n}\n\n/**\n * ellipse formula\n *\n **/\nexport const calcCurEllipsePosX: (elId: number, radiusWidth: number, radiusHeight: number, unitDegree: number, alphaDeg?: number) => number = (elId, radiusWidth, radiusHeight, unitDegree, alphaDeg) => {\n  // need to separate for + and -\n  \n  const curDeg = (unitDegree * elId) + alphaDeg\n  const curY = radiusHeight * Math.sin(convertDegToRadian(curDeg)) // y = b * sin(theta)\n  return radiusWidth * Math.cos(convertDegToRadian(curDeg))\n}\n\nexport const calcCurEllipsePosY: (elId: number, radiusWidth: number, radiusHeight: number, unitDegree: number, alphaDeg?: number) => number = (elId, radiusWidth, radiusHeight, unitDegree, alphaDeg) => {\n  // need to separate for + and -\n  const curDeg = (unitDegree * elId) + alphaDeg\n  const curX = radiusWidth * Math.cos(convertDegToRadian(curDeg)) // y = a * cos(theta)\n  // since browser x-y asix is the oppsite to math, change sign (- & +)\n  return - radiusHeight * Math.sin(convertDegToRadian(curDeg))\n}\n\n/**\n * pagination\n **/\nexport const convertPageToOffset: (total: number, limit: number, page: number) => number = (total, limit, page) => {\n  return (page - 1) * limit;\n}\n\nexport const convertOffsetToPage: (total: number, limit: number, offset: number) => number = (total, limit, offset) => {\n  return (offset / limit) + 1;\n}\n\nexport const calculateMaxPageNumber: (total: number, limit: number) => number = (total, limit) => {\n  return Math.ceil(total / limit)\n}\n\nexport const generatePageLinkSlice: (begin: number, end: number) => PageLinkType[] = (begin, end) => {\n  const pageLinks: PageLinkType[] = []\n\n  for (let i = begin; i < end; i++) {\n    pageLinks.push({ num: i })\n  }\n\n  return pageLinks\n}\n\nexport const generatePaginationLink: (total: number, limit: number, curPage: number, btnNum: number) => PageLinkType[] = (total, limit, curPage, btnNum) => {\n\n  const leftNum = Math.floor(btnNum/2);\n  const rightNum = Math.floor(btnNum/2);\n  const maxPageNum = calculateMaxPageNumber(total, limit);\n\n  if (total <= limit) {\n    return [];\n  }\n\n  if (curPage <= leftNum + 1) {\n    let upperPageNum\n    if (maxPageNum - btnNum > 0) {\n      upperPageNum = btnNum\n    } else {\n      upperPageNum = maxPageNum\n    }\n\n    return generatePageLinkSlice(1, upperPageNum+1)\n  } else if (maxPageNum - curPage < rightNum + 1) {\n    return generatePageLinkSlice(maxPageNum - (btnNum - 1), maxPageNum + 1)\n  } else {\n    let lowerPageNum; \n    if (curPage - leftNum < 0) {\n      lowerPageNum = 1;\n    } else {\n      lowerPageNum = curPage - leftNum\n    }\n    let upperPageNum \n    if (curPage + rightNum > maxPageNum) {\n      upperPageNum = maxPageNum\n    } else {\n      upperPageNum = curPage + rightNum\n    }\n    return generatePageLinkSlice(lowerPageNum, upperPageNum + 1)\n  }\n\n}\n\n","import { DomainPaginationType } from \"states/types\";\n\nexport enum FetchStatusEnum {\n  INITIAL = \"INITIAL\",\n  FETCHING = \"FETCHING\",\n  FAILED = \"FAILED\",\n  SUCCESS = \"SUCCESS\",\n}\n\nexport declare type SortType = {\n  key: string\n  label: string\n}\n\nexport type RequestTrackerBaseType = {\n  ids: string[]\n  pagination?: DomainPaginationType\n}\n\nexport declare type RequestTrackerType  = {\n  [key: string]: RequestTrackerBaseType\n}\n","import { css, keyframes, createGlobalStyle } from \"styled-components\";\n\n/**\n * responsive \n **/\nexport const size = {\n  mobileS: 320,\n  mobileM: 375,\n  mobileL: 425,\n  tablet: 768,\n  laptop: 1024,\n  laptopL: 1440,\n  desktop: 2560\n}\n\nexport const device = {\n  mobileS: `only screen and (min-width: ${size.mobileS}px)`,\n  mobileM: `only screen and (min-width: ${size.mobileM}px)`,\n  mobileL: `only screen and (min-width: ${size.mobileL}px)`,\n  tablet: `only screen and (min-width: ${size.tablet}px)`,\n  laptop: `only screen and (min-width: ${size.laptop}px)`,\n  laptopL: `only screen and (min-width: ${size.laptopL}px)`,\n  desktop: `only screen and (min-width: ${size.desktop}px)`,\n  desktopL: `only screen and (min-width: ${size.desktop}px)`,\n  mobileOnly: `only screen and (max-width: ${size.tablet - 1}px)`,\n  tabletOnly: `only screen and (min-width: ${size.tablet}px) and (max-width: ${size.laptop - 1}px)`,\n  laptopOnly: `only screen and (min-width: ${size.laptop}px) and (max-width: ${size.desktop - 1}px)`,\n  lteTablet: `only screen and (max-width: ${size.laptop - 1}px)`,\n  lteLaptop: `only screen and (max-width: ${size.desktop - 1}px)`,\n};\n\n/**\n * base 'styled' style\n **/\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n\n  }\n  html {\n    width: 100%;\n    font-size: 62.5%;\n    /* disable 'bounce' effect or 'refresh' effect when scroll position top or bottom */\n    /* not sure this is working or not */\n    /* values:  */\n    / *  - 'contain': default but no scroll chaining */\n    / *  - 'none': neither bounce/refresh nor scroll chaining */\n    overscroll-behavior: none;\n  }\n\n  body {\n    font-family: \"Times New Roman\", Times, serif;\n    font-size: 1.6em;\n    margin: 0;\n    /* prevent horizontal scroll (overflow) at mobile */\n    position: relative;\n  }\n\n  /* prevent overflow on mobile */\n  html, body {\n    overflow-x:hidden\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  /* turn off iPhone/Safari input element rounding */\n  input {\n    border-radius: 0;\n  }\n\n  input[type=\"search\"] {\n    -webkit-appearance: none;\n  }\n\n  /* prevent input zoom (ios) on mobile */\n  input {\n    font-size: 16px;\n  }\n\n`\n\n\nexport const BaseInputStyle = css`\n  border: none;\n  border-bottom: 1px solid #fff;\n  margin: 3px 5px; \n  padding: 3px;\n  background-color: transparent;\n  color: #fff;\n`\n\nexport const BaseInputBtnStyle = css`\n  border: 1px solid #fff;\n  background-color: transparent;\n  padding: 3px;\n  color: #fff;\n  margin: 3px 5px;\n\n`\n\nexport const ShowUpKeyFrames = keyframes`\n  0% {\n    opacity: 0;\n    visibility: hidden;\n  }\n\n  50% {\n    opacity: 1;\n    visibility: visible;\n  }\n\n  100% {\n    opacity: 0;\n    visibility: hidden;\n  }\n`\n\n","import * as React from 'react';\nimport { PageLinkType, PaginationPropsType } from './types';\nimport { convertOffsetToPage, calculateMaxPageNumber, generatePaginationLink } from 'src/utils';\nimport styled from 'styled-components';\nimport { device } from 'ui/css/base';\n\nconst PaginationBox = styled.div`\n\n  width: 100vw;\n  position: fixed;\n  bottom: 0;\n  padding: 5px;\n\n  @media ${device.laptop} {\n  }\n`\n\nconst PaginationContent = styled.div`\n  text-align: center;\n`\n\ndeclare type PaginationBtnPropsType = {\n  active?: boolean\n}\n\nconst PaginationBtn = styled.button`\n  margin: 0 5px;\n  background-color: transparent;\n  color: #fff;\n  border: none;\n  border-radius: 10px;\n  padding: 3px 3px;\n  font-size: 1.2em; \n  font-weight: bold;\n  cursor: pointer;\n  transition: all 1s;\n  width: 30px;\n  height: 30px;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:hover {\n    background-color: #fff;\n    color: #000;\n    transition: all 1s;\n  }\n\n  ${(props: PaginationBtnPropsType) => {\n    if (props.active) {\n      return `\n        background-color: #fff;\n        color: #000;\n      `\n    }\n  }}\n`\n\nconst Pagination: React.FunctionComponent<PaginationPropsType> = (props) => {\n\n  const curPage = convertOffsetToPage(props.total, props.limit, props.offset)\n\n  const maxPage = calculateMaxPageNumber(props.total, props.limit)\n\n  const pageLinks = generatePaginationLink(props.total, props.limit, curPage, props.btnNum)\n\n  /**\n   * better use icon for << and >>\n   **/\n  const renderPagination: () => React.ReactNode = () => {\n    return pageLinks.map((page: PageLinkType) => {\n      return (\n        <PaginationBtn \n          active={curPage == page.num}\n          value={page.num} \n          key={page.num} \n          onClick={props.onClick}\n        >\n            {page.num}\n        </PaginationBtn>\n      )\n    })\n  }\n\n  return (pageLinks && pageLinks.length > 0 &&\n    <PaginationBox>\n      <PaginationContent>\n        <PaginationBtn value={1} key={1} onClick={props.onClick}>&laquo;</PaginationBtn>\n        {renderPagination()}\n        <PaginationBtn value={maxPage} key={maxPage} onClick={props.onClick}>&raquo;</PaginationBtn>\n      </PaginationContent>\n    </PaginationBox>\n  );\n}\n\nexport default Pagination \n","import * as React from 'react'\nimport { UseResponsiveStatusInputType, UseResponsiveStatusOutputType, ScreenSizeStatusType } from './types';\n\nexport const useResponsive = (): UseResponsiveStatusOutputType => {\n\n  const size = {\n    mobileS: 320,\n    mobileM: 375,\n    mobileL: 425,\n    tablet: 768, //  768 <= tablet size < 1024\n    laptop: 1024,\n    laptopL: 1440,\n    desktop: 2560,\n  }\n\n  const [currentScreenSize, setScreenSize] = React.useState<ScreenSizeStatusType>({\n    currentScreenWidth: window.innerWidth,\n    currentScreenHeight: window.innerHeight,\n    isMobile: window.innerWidth < size.tablet,\n    isTablet: size.tablet <= window.innerWidth && window.innerWidth < size.laptop,\n    isLaptop: size.laptop <= window.innerWidth && window.innerWidth < size.desktop,\n    isDesktop: size.desktop <= window.innerWidth,\n    isLTETablet: window.innerWidth < size.laptop,\n    isLTELaptop: window.innerWidth < size.desktop,\n    isLandscape: window.innerWidth > window.innerHeight,\n    isTouchDevice: (('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0)), // src: https://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript\n  });\n\n  React.useEffect(() => {\n    function handleScreenWidth() {\n      setScreenSize({\n        currentScreenWidth: window.innerWidth,\n        currentScreenHeight: window.innerHeight,\n        isMobile: window.innerWidth < size.tablet,\n        isTablet: size.tablet <= window.innerWidth && window.innerWidth < size.laptop,\n        isLaptop: size.laptop <= window.innerWidth && window.innerWidth < size.desktop,\n        isDesktop: size.desktop <= window.innerWidth,\n        isLTETablet: window.innerWidth < size.laptop,\n        isLTELaptop: window.innerWidth < size.desktop,\n        isLandscape: window.innerWidth > window.innerHeight,\n        isTouchDevice: (('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0)), // src: https://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript\n      });\n    }\n\n    window.addEventListener(\"resize\", handleScreenWidth);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleScreenWidth);\n    };\n  }, [\n      JSON.stringify(currentScreenSize)\n    ]);\n\n  return currentScreenSize\n}\n\n","import { createSlice, PayloadAction, createAction } from \"@reduxjs/toolkit\";\nimport { FetchStatusEnum, SortType, RequestTrackerType } from \"src/app\";\nimport { CategoryType } from \"domain/category\";\n\n/**\n * common reducer action type\n *   - call multiple reducers on different properties\n **/\n\n// cancel all sort & filter\nexport const clearAllSortAndFilterActionCreator = createAction(\"/app/common/clearAllSortAndFilter\")\nexport const clearAllSortAndFilterActionTypeName = clearAllSortAndFilterActionCreator().type\n\n/**\n * app.searchKeyword state Slice\n **/\nexport type searchKeywordUpdateActionType = PayloadAction<string>\n\nexport const searchKeywordSlice = createSlice({\n  name: \"app/searchKeyword\", // a name used in action type\n  initialState: \"\",\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: string, action: searchKeywordUpdateActionType) => action.payload,\n    clear: (state: string) => \"\",\n\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n  extraReducers: (builder) => {\n    builder.addCase(\n      clearAllSortAndFilterActionCreator,\n      (state: string) => \"\"\n    )\n  }\n})\n\nexport const searchKeywordSliceReducer = searchKeywordSlice.reducer\nexport const searchKeywordActions = searchKeywordSlice.actions\n\n/**\n * app.fetchStatus state Slice\n **/\nexport type fetchStatusUpdateActionType = PayloadAction<FetchStatusEnum>\n\nexport const fetchStatusSlice = createSlice({\n  name: \"app/fetchStatus\", // a name used in action type\n  initialState: \"\",\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: fetchStatusUpdateActionType) => action.payload,\n    clear: () => FetchStatusEnum.INITIAL,\n\n  }\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const fetchStatusSliceReducer = fetchStatusSlice.reducer\nexport const fetchStatusActions = fetchStatusSlice.actions\n\n/**\n * app.categoryFetchStatus state Slice\n **/\nexport type categoryFetchStatusUpdateActionType = PayloadAction<FetchStatusEnum>\n\nexport const categoryFetchStatusSlice = createSlice({\n  name: \"app/categoryFetchStatus\", // a name used in action type\n  initialState: \"\",\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: categoryFetchStatusUpdateActionType) => action.payload,\n    clear: () => FetchStatusEnum.INITIAL,\n\n  }\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const categoryFetchStatusSliceReducer = categoryFetchStatusSlice.reducer\nexport const categoryFetchStatusActions = categoryFetchStatusSlice.actions\n\n/**\n * app.curCategory state Slice\n **/\nexport type curCategoryUpdateActionType = PayloadAction<CategoryType>\n\nexport const curCategorySlice = createSlice({\n  name: \"app/curCategory\", // a name used in action type\n  initialState: null,\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: CategoryType, action: curCategoryUpdateActionType) => action.payload,\n    clear: (state: CategoryType) => ({\n      id: -1,\n      attributes: {\n        title: \"\",\n        description: \"\",\n      }\n    })\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n  extraReducers: (builder) => {\n    builder.addCase(\n      clearAllSortAndFilterActionCreator,\n      (state: CategoryType) => {\n        return {\n          id: -1,\n          attributes: {\n            title: \"\",\n            description: \"\",\n          }\n        } // set fake default category object to avoid null error for the 2nd arg in useEffect\n      }\n    )\n  }\n})\n\nexport const curCategorySliceReducer = curCategorySlice.reducer\nexport const curCategoryActions = curCategorySlice.actions\n\n/**\n * app.curCategorySearchKeyword state Slice\n **/\nexport type curCategorySearchKeywordUpdateActionType = PayloadAction<string>\n\nexport const curCategorySearchKeywordSlice = createSlice({\n  name: \"app/curCategorySearchKeyword\", // a name used in action type\n  initialState: null,\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: string, action: curCategorySearchKeywordUpdateActionType) => action.payload,\n    clear: (state: string) => \"\" \n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n  extraReducers: (builder) => {\n    builder.addCase(\n      clearAllSortAndFilterActionCreator,\n      (state: string) => \"\" \n    )\n  }\n})\n\nexport const curCategorySearchKeywordSliceReducer = curCategorySearchKeywordSlice.reducer\nexport const curCategorySearchKeywordActions = curCategorySearchKeywordSlice.actions\n/**\n * app.curSort state Slice\n **/\nexport type curSortUpdateActionType = PayloadAction<SortType>\n\nexport const curSortSlice = createSlice({\n  name: \"app/curSort\", // a name used in action type\n  initialState: null,\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: SortType, action: curSortUpdateActionType) => action.payload,\n    clear: (state: SortType) => null\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n  extraReducers: (builder) => {\n    builder.addCase(\n      clearAllSortAndFilterActionCreator,\n      (state: SortType) => null\n    )\n  }\n})\n\nexport const curSortSliceReducer = curSortSlice.reducer\nexport const curSortActions = curSortSlice.actions\n\n/**\n * app.sortList state Slice\n **/\nexport type sortListUpdateActionType = PayloadAction<SortType[]>\n\nexport const sortListSlice = createSlice({\n  name: \"app/sortList\", // a name used in action type\n  initialState: [\n    {\n      key: \"createdAt\", // asc\n      label: \"Recent\"\n    },\n    {\n      key: \"-createdAt\", // desc\n      label: \"Old\"\n    },\n    {\n      key: \"titles\", // desc\n      label: \"Title Asc\"\n    },\n    {\n      key: \"-titles\", // desc\n      label: \"Title Desc\"\n    },\n    {\n      key: \"averageRating\", // desc\n      label: \"Higher Rating\"\n    },\n    {\n      key: \"-averageRating\", // desc\n      label: \"Lower Rating\"\n    },\n  ],\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: SortType[], action: sortListUpdateActionType) => action.payload,\n    clear: (state: SortType[]) => []\n  }\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const sortListSliceReducer = sortListSlice.reducer\nexport const sortListActions = sortListSlice.actions\n\n/**\n * app.requestTracker state Slice\n **/\nexport type requestTrackerUpdateActionType = PayloadAction<RequestTrackerType>\n\nexport const requestTrackerSlice = createSlice({\n  name: \"app/requestTracker\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: RequestTrackerType, action: requestTrackerUpdateActionType) => ({ ...state, ...action.payload }),\n    clear: (state: RequestTrackerType) => null\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const requestTrackerSliceReducer = requestTrackerSlice.reducer\nexport const requestTrackerActions = requestTrackerSlice.actions\n","import { PayloadAction, createSlice, createAction } from \"@reduxjs/toolkit\";\nimport { NormalizedAnimeType } from \"domain/anime\";\nimport { merge } from \"lodash\";\nimport { DomainStateSubType, DomainPaginationType } from \"states/types\";\nimport { clearAllSortAndFilterActionCreator } from \"../app\";\n\n\n/**\n * redux-sage actions\n *\n *  - use this in index.tsx at watchers\n *\n **/\nexport const fetchAnimeActionCreator = createAction(\"rs/domain/anime/fetch\")\nexport const fetchAnimeActionTypeName = fetchAnimeActionCreator().type\n\n/**\n * domain.animes state Slice\n *\n * * 'createReducer' usage:\n *  - Most importantly, you need to ensure that you either mutate the state argument or return a new state, but not both.\n *  - source: https://redux-toolkit.js.org/api/createReducer\n *\n * *\n *\n *\n **/\n// action type             \nexport type updateAnimeActionType = PayloadAction<NormalizedAnimeType>\n\nexport const updateAnimeDataSlice = createSlice({\n  name: \"domain/animes/data\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    merge: (state: NormalizedAnimeType, action: PayloadAction<NormalizedAnimeType>) => merge(state, action.payload),\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.                                  \n   **/\n})\n\nexport const updateAnimeDataSliceReducer = updateAnimeDataSlice.reducer\nexport const updateAnimeDataActions = updateAnimeDataSlice.actions\n\n/**\n * update anime pagination state\n *\n **/\nexport type updateAnimePaginationDataActionType = PayloadAction<DomainPaginationType>\n\nexport const updateAnimePaginationDataSlice = createSlice({\n  name: \"domain/animes/pagination\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: DomainPaginationType, action: PayloadAction<DomainPaginationType>) => action.payload,\n    clear: (state: DomainPaginationType) => ({\n        limit: 10,\n        offset: 0,\n        total: 0,\n      }), \n  },\n  extraReducers: (builder) => {\n    builder.addCase(\n      clearAllSortAndFilterActionCreator,\n      (state: DomainPaginationType) => ({\n        limit: 10,\n        offset: 0,\n        total: 0,\n      }) \n    )\n  }\n})\n\nexport const updateAnimePaginationDataSliceReducer = updateAnimePaginationDataSlice.reducer\nexport const updateAnimePaginationDataActions = updateAnimePaginationDataSlice.actions\n\n\n/**\n * update anime curItems ('result' prop of normalizr) state\n *\n **/\nexport type updateAnimeCurItemsDataActionType = PayloadAction<string[]>\n\nexport const updateAnimeCurItemsDataSlice = createSlice({\n  name: \"domain/animes/curItems\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: string[], action: PayloadAction<string[]>) => action.payload\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.                                  \n   **/\n})\n\nexport const updateAnimeCurItemsDataSliceReducer = updateAnimeCurItemsDataSlice.reducer\nexport const updateAnimeCurItemsDataActions = updateAnimeCurItemsDataSlice.actions\n\n","import { StateType } from \"./types\";\nimport { schema } from 'normalizr';\n//import { tagData } from \"./data/tag\";\n//import { categoryData } from \"./data/category\";\n//import { blogData } from \"./data/blog\";\nimport { normalize } from 'normalizr';\nimport { FetchStatusEnum } from \"src/app\";\n\n/**\n *\n * normalizr definition\n *\n **/\n\n// category\n//const categorySchemaEntity = new schema.Entity(\n//  \"categories\",\n//  {},\n//  {\n//    // need to override default value ('id')\n//    idAttribute: \"path\",\n//  }\n//)\n//\n//// tags\n//const tagSchemaEntity = new schema.Entity(\n//  \"tags\",\n//  {},\n//  {\n//    idAttribute: \"name\",\n//  }\n//)\n//\n//export const tagSchemaArray = new schema.Array(tagSchemaEntity)\n\n// anime \nconst animeSchemaEntity = new schema.Entity(\n  \"animes\",\n)\nexport const animeSchemaArray = new schema.Array(animeSchemaEntity)\n\n// make connection btw blogs and categories\n//categorySchemaEntity.define({\n//  blogs: blogSchemaArray\n//})\n\n/**\n *\n * normalize blog data\n *\n **/\nconst normalizedResult = normalize(\n  {},\n  animeSchemaArray\n)\n\n/**\n *\n * initial state\n *\n **/\nexport const initialState: StateType = {\n  ui: {\n    leftNavMenu: false,\n    rightNavMenu: false,\n    searchModal: false,\n  },\n  app: {\n    searchKeyword: \"\",\n    fetchStatus: FetchStatusEnum.INITIAL,\n    categoryFetchStatus: FetchStatusEnum.INITIAL,\n    curCategory: {\n      id: -1,\n      attributes: {\n        title: \"\", \n        description: \"\",\n      }\n    }, // set fake default category object to avoid null error for the 2nd arg in useEffect\n    curCategorySearchKeyword: \"\",\n    curSort: null,\n    sortList: [\n      {\n        key:  \"-createdAt\", // asc\n        label: \"Recent\"\n      },\n      {\n        key:  \"createdAt\", // desc\n        label: \"Old\"\n      },\n      {\n        key:  \"-favoritesCount\", // desc\n        label: \"More Favorites Count\"\n      },\n      {\n        key:  \"favoritesCount\", // desc\n        label: \"Less Favorites Count\"\n      },\n      {\n        key:  \"-averageRating\", // desc\n        label: \"Higher Rating\"\n      },\n      {\n        key:  \"averageRating\", // desc\n        label: \"Lower Rating\"\n      },\n    ],\n    requestTracker: {}\n  },\n  domain: {\n    animes: {\n      data: {},\n      pagination: {\n        limit: 10,\n        offset: 0,\n        total: 0,\n      },\n      curItems: [],\n    },\n    categories: [],\n    //    categories: normalizedResult.entities.categories,\n    //    tags: normalizedResult.entities.tags,\n  },\n}\n\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { AnimeType } from \"domain/anime\";\nimport { CategoryType } from \"domain/category\";\nimport { denormalize } from \"normalizr\";\nimport { animeSchemaArray } from \"states/state\";\nimport { StateType } from \"states/types\";\n\nexport const rsSelector = {\n  /**\n * selector function to retrieve data from redux store\n **/\n\n  /**\n   * check this: https://redux-toolkit.js.org/api/createEntityAdapter\n   **/\n\n  /**\n   *\n   * low level (pure) selector is always run (different from reselect) (no cache)\n   *\n   **/\n\n  ui: {\n    getLeftNavMenu: (state: StateType) => state.ui.leftNavMenu,\n    getRightNavMenu: (state: StateType) => state.ui.rightNavMenu,\n    getSearchModal: (state: StateType) => state.ui.searchModal,\n  },\n\n  app: {\n    getSearchKeyword: (state: StateType) => state.app.searchKeyword,\n    getFetchStatus: (state: StateType) => state.app.fetchStatus,\n    getCurCategory: (state: StateType) => state.app.curCategory,\n    getCurCategorySearchKeyword: (state: StateType) => state.app.curCategorySearchKeyword,\n    getCurSort: (state: StateType) => state.app.curSort,\n    getSortList: (state: StateType) => state.app.sortList,\n    getRequestTracker: (state: StateType) => state.app.requestTracker,\n  },\n\n  domain: {\n    getDomain: (state: StateType) => state.domain,\n    getAnimeData: (state: StateType) => state.domain.animes.data,\n    getAnimePaginationData: (state: StateType) => state.domain.animes.pagination,\n    getAnimeCurItemsData: (state: StateType) => state.domain.animes.curItems,\n    getCategoryData: (state: StateType) => state.domain.categories,\n  }\n}\n\n/**\n * memorized selector note:\n *\n * it has cache (size 1) capability. so if its particular portion of state tree hasn't change, it returns cached value.\n *\n * However, if multiple component instances use the same memorized selector instance, you CAN'T use this cache features. since the memorized selector recognized that revieved arguments are different every time when it is called.\n *\n * Therefore, you have to give a copy of momerized selector to each component instance. (I'm not sure it is true when using redux-saga though)\n *\n **/\n\nexport const mSelector = {\n\n  // ui.leftNavMenu\n  makeLeftNavMenuSelector: () => {\n    return createSelector(\n      [\n        rsSelector.ui.getLeftNavMenu\n      ],\n      (leftNavMenu) => {\n        return leftNavMenu\n      },\n    )\n  },\n\n  // ui.rightNavMenu\n  makeRightNavMenuSelector: () => {\n    return createSelector(\n      [\n        rsSelector.ui.getRightNavMenu\n      ],\n      (rightNavMenu) => {\n        return rightNavMenu\n      },\n    )\n  },\n\n  // ui.searchModal\n  makeSearchModalSelector: () => {\n    return createSelector(\n      [\n        rsSelector.ui.getSearchModal\n      ],\n      (searchModal) => {\n        return searchModal\n      },\n    )\n  },\n\n  // app.searchKeyword\n  makeSearchKeywordSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getSearchKeyword\n      ],\n      (keyword) => {\n        return keyword\n      },\n    )\n  },\n\n  // app.fetchStatus\n  makeFetchStatusSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getFetchStatus\n      ],\n      (fetchStatus) => {\n        return fetchStatus\n      },\n    )\n  },\n\n  // app.curCategory\n  makeCurCategorySelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getCurCategory\n      ],\n      (curCategory) => {\n        return curCategory\n      },\n    )\n  },\n  \n  // app.curCategorySearchKeyword\n  makeCurCategorySearchKeywordSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getCurCategorySearchKeyword\n      ],\n      (curCategorySearchKeyword) => {\n        return curCategorySearchKeyword\n      },\n    )\n  },\n\n  // app.curSort\n  makeCurSortSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getCurSort\n      ],\n      (curSort) => {\n        return curSort\n      },\n    )\n  },\n\n  // app.sortList\n  makeSortListSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getSortList\n      ],\n      (sortList) => {\n        return sortList\n      },\n    )\n  },\n\n  // app.requestTracker\n  makeRequestTrackerSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getRequestTracker\n      ],\n      (requestTracker) => {\n        return requestTracker\n      },\n    )\n  },\n\n  // domain.animes\n  makeAnimeDataSelector: () => {\n    return createSelector(\n      [\n        // need to be domain to denormalize\n        rsSelector.domain.getAnimeData,\n        rsSelector.domain.getAnimePaginationData,\n        rsSelector.domain.getAnimeCurItemsData,\n      ],\n      (animes, pagination, curItems) => {\n\n        /**\n         * return empty array before fetch\n         **/\n        if (Object.keys(animes).length === 0) {\n          return []\n        }\n\n        /**\n         * denormalize \n         *\n         * this return { 'domain-name': [{ domain1 }, { domain2 }] in the format\n         **/\n        const denormalizedEntity = denormalize(\n          Object.keys(animes), // ex, [0, 1, 2, 3, 4] ('result' prop of normalized data)\n          animeSchemaArray,\n          {\n            animes: animes\n          }, // entities prop of normalized data (ex, { animes: { \"1\": { ... }, \"2\": { ... }, ... }})\n        )\n\n        /**\n         * filter items with paginaiton\n         *\n         *  - RE-IMPLEMENTATION REQUIRED:\n         *    - if a user skip the some pages, for example, when the user click page # 4 after initial fetch, this logic does not work. especially, return empty array since the elements based on the index range does not exist.\n         *    - solution: use 'result' prop of normalizr:)\n         *\n         *    \n         *\n         **/\n        const filteredDenormalizedEntity = denormalizedEntity.filter((anime: AnimeType) => curItems.includes(anime.id) ? true : false)\n\n        return filteredDenormalizedEntity\n      },\n    )\n  },\n\n  // domain.animes\n  makeAnimePaginationDataSelector: () => {\n    return createSelector(\n      [\n        // need to be domain to denormalize\n        rsSelector.domain.getAnimePaginationData\n      ],\n      (pagination) => {\n        return pagination\n      },\n    )\n  },\n\n  // domain.categories\n  makeCategoryWithFilterDataSelector: (categoryKeyword: string) => {\n    return createSelector(\n      [\n        // need to be domain to denormalize\n        rsSelector.domain.getCategoryData,\n      ],\n      (categories) => {\n\n        /**\n         * if empty, return empty array to prevent display all categories at initial loading\n         **/\n        if (!categoryKeyword) {\n          return []\n        }\n        \n        const filteredCategories = categories\n          .filter((category: CategoryType) => {\n            /**\n             *\n             * use String.indexOf(substring) instead of String.includes for older browsers and IE\n             *\n             * use String.prototype.indexOf, which returns -1 when a substring cannot be found\n             *\n             * case insensitive\n             *\n             * only return max 5 items\n             *\n             **/\n            if (\n              category.attributes.title.toUpperCase().indexOf(categoryKeyword.toUpperCase()) !== -1\n              //|| category.attributes.description.indexOf(categoryKeyword) !== -1\n            ) {\n              return true\n            } else {\n              return false\n            }\n          }).slice(0, 5)\n\n        return filteredCategories\n      },\n    )\n  },\n}\n\n","import { PayloadAction, createSlice, createAction } from \"@reduxjs/toolkit\";\nimport { merge } from \"lodash\";\nimport { CategoryType } from \"domain/category\";\n\n/**\n * redux-sage actions\n *\n *  - use this in index.tsx at watchers\n *\n **/\nexport const fetchCategoryActionCreator = createAction(\"rs/domain/category/fetch\")\nexport const fetchCategoryActionTypeName = fetchCategoryActionCreator().type\n\n/**\n * domain.categorys state Slice\n *\n * * this domain does not use 'normalizr', just keep it as array\n **/\n// action type             \nexport type CategoryDataUpdateActionType = PayloadAction<CategoryType[]> \n\nexport const categoryDataSlice = createSlice({ \n  name: \"domain/categories\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    merge: (state: CategoryType[], action: CategoryDataUpdateActionType) => merge(state, action.payload),\n    update: (state: CategoryType[], action: CategoryDataUpdateActionType) => action.payload,\n    clear: (state: CategoryType[]) => [],\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.                                                                                                                                                                                                                                \n   **/\n}) \n\nexport const categoryDataSliceReducer = categoryDataSlice.reducer\nexport const categoryDataActions = categoryDataSlice.actions    \n\n","import * as React from 'react';\nimport { IconProps } from './types';\nimport styled from 'styled-components';\n\nconst CloseI: React.FunctionComponent<IconProps> = (props) => {\n\n  const color = props.color ? props.color : \"#fff\";\n\n  return (\n    <svg \n      viewBox=\"0 0 23 25\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={props.className}\n      onClick={props.onClick}\n    >\n      <path \n        d=\"M14.722 13l4.833-4.549a1.371 1.371 0 000-2.021l-1.074-1.011a1.587 1.587 0 00-2.148 0L11.5 9.967 6.667 5.42a1.587 1.587 0 00-2.148 0l-1.074 1.01a1.371 1.371 0 000 2.022L8.278 13l-4.833 4.549a1.371 1.371 0 000 2.021l1.074 1.011a1.587 1.587 0 002.148 0l4.833-4.548 4.833 4.548a1.587 1.587 0 002.148 0l1.074-1.01a1.371 1.371 0 000-2.022L14.722 13z\" \n        fill={color}\n      />\n    </svg>\n  )\n}\n\nexport default CloseI \n","import { CategoryType } from 'domain/category';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { curCategoryActions, curCategorySearchKeywordActions } from 'reducers/slices/app';\nimport { updateAnimePaginationDataActions } from 'reducers/slices/domain/anime';\nimport { fetchCategoryActionCreator } from 'reducers/slices/domain/categories';\nimport { mSelector } from 'src/selectors/selector';\nimport styled from 'styled-components';\nimport { BaseInputStyle, device } from 'ui/css/base';\nimport CloseI from '../icons/CloseI';\n\nconst CategorySearchInputBox = styled.div`\n  color: #fff;\n`\n\nconst CategorySearchInput = styled.input`\n ${BaseInputStyle}\n text-align: center;\n font-size: 1em;\n \n @media ${device.lteTablet} {\n  width: 90%;\n }\n\n @media ${device.laptop} {\n }\n`\n\nconst CategoryResetIcon = styled(CloseI)`\n  width: 25px;\n  height: 25px;\n  vertical-align: middle;\n  cursor: pointer;\n\n`\n\nconst CategorySearchResultBox = styled.div`\n  position: relative; // for CategoryItem styling\n  width: 90%;\n  margin: 0 auto;\n`\n\nconst CategorySearchInnerBox = styled.div`\n  position: absolute;\n  width: 100%;\n  background-color: #000;\n`\nconst CategoryFilterTile = styled.h3`\n  @media ${device.laptop} {\n    display: inline;\n    margin: 0 8px 0 0;\n  }\n`\ndeclare type CategoryItemPropsType = {\n  active: boolean\n}\n\nconst CategoryItem = styled.div`\n  background-color: ${(props: CategoryItemPropsType) => (props.active) ? \"#000\" : \"#fff\"};\n  color: ${(props: CategoryItemPropsType) => (props.active) ? \"#fff\" : \"#000\"};  \n\n  padding: 5px;\n  border: 1px solid #000;\n`\n\n\nexport declare type CategoryFilterPropsType = {\n  className?: string\n}\n\nconst CategoryFilter: React.FunctionComponent<CategoryFilterPropsType> = ({\n  className\n}) => {\n  // redux dispatcher\n  const dispatch = useDispatch()\n  \n  /**\n   * category search feature\n   **/\n  const curCategorySearchKeyword = useSelector(mSelector.makeCurCategorySearchKeywordSelector())\n  const categorySearchInputRef = React.useRef<HTMLInputElement>(null)\n  const categories = useSelector(mSelector.makeCategoryWithFilterDataSelector(curCategorySearchKeyword))\n  const handleCategorySearchChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    // filter category items and display those on the list\n    setCategorySuggestionShow(true)\n    const nextCategorySearchKeyword = e.currentTarget.value\n    dispatch(curCategorySearchKeywordActions.update(nextCategorySearchKeyword))\n  }\n\n  // reset category selection\n  const handleCategoryResetIconClick: React.EventHandler<React.MouseEvent<SVGElement>> = (e) => {\n    dispatch(curCategoryActions.clear())\n    dispatch(curCategorySearchKeywordActions.clear())\n  }\n\n  //const [curCategoryId, setCurCategoryId] = React.useState<number>(-1) // put default value (-1) to avoid 'calling toSTring() of undefined'\n  const handleCategorySelectionClickEvent: React.EventHandler<React.MouseEvent<HTMLDivElement>> = (e) => {\n\n    if (categorySearchInputRef.current) {\n      const nextCurCategoryId: number = parseInt(e.currentTarget.getAttribute(\"data-value\"))\n\n      // search this category by id through 'categories'\n      const nextCurCategory: CategoryType = categories.find((category: CategoryType) => category.id == nextCurCategoryId)\n\n      // set current category search text (redux state)\n      dispatch(curCategorySearchKeywordActions.update(nextCurCategory.attributes.title))\n\n      // update category search input\n      categorySearchInputRef.current.value = nextCurCategory.attributes.title\n\n      // update curCategory (app state)\n      dispatch(curCategoryActions.update(nextCurCategory))\n\n      // update curCategoryId (local state)\n      // setCurCategoryId(nextCurCategoryId)\n\n      // cancel pagination\n      dispatch(updateAnimePaginationDataActions.clear())\n\n      setCategorySuggestionShow(false)\n    }\n  }\n\n\n  /**\n   * auto complete feature\n   **/\n  const [isCategorySuggestionShow, setCategorySuggestionShow] = React.useState<boolean>(false)\n  const [curSelectedCategorySuggestionItemIndex, setSelectedCategorySuggestionItemIndex] = React.useState<number>(-1)\n  const handleArrowKeyDownEvent: React.EventHandler<React.KeyboardEvent<HTMLInputElement>> = (e) => {\n\n    // add boundary check of this categories array\n    if (e.key == 'ArrowDown' && curSelectedCategorySuggestionItemIndex < (categories.length - 1)) {\n      setSelectedCategorySuggestionItemIndex((prev: number) => ++prev)\n    } else if (e.key == 'ArrowUp' && curSelectedCategorySuggestionItemIndex >= 0) {\n      setSelectedCategorySuggestionItemIndex((prev: number) => --prev)\n    } else if (e.key == 'Enter') {\n      if (curSelectedCategorySuggestionItemIndex !== -1) {\n        const nextCategorySearchKeyword = categories[curSelectedCategorySuggestionItemIndex].attributes.title\n        const nextCurCategoryId = categories[curSelectedCategorySuggestionItemIndex].id\n        e.currentTarget.value = nextCategorySearchKeyword\n        dispatch(curCategorySearchKeywordActions.update(nextCategorySearchKeyword))\n        // search this category by id through 'categories'\n        const nextCurCategory: CategoryType = categories.find((category: CategoryType) => category.id == nextCurCategoryId)\n\n        // update curCategory (app state)\n        dispatch(curCategoryActions.update(nextCurCategory))\n\n        // cancel pagination\n        dispatch(updateAnimePaginationDataActions.clear())\n\n        setCategorySuggestionShow(false)\n      }\n    }\n  }\n\n  const renderCategoryComponents: () => React.ReactNode = () => {\n    return categories.map((category: CategoryType, index: number) => {\n      return (\n        <CategoryItem\n          key={category.id}\n          data-value={category.id}\n          onClick={handleCategorySelectionClickEvent}\n          active={(curSelectedCategorySuggestionItemIndex == index) ? true : false}\n        /**ref={(el: any) => categorySuggestionListRef.current[index] = el}**/\n        >\n          {category.attributes.title}\n        </CategoryItem>\n      )\n    })\n  }\n\n  // initial fetch categories (only once)\n  React.useEffect(() => {\n    dispatch(fetchCategoryActionCreator())\n  }, [])\n\n  return (\n    <div className={className}>\n      <CategorySearchInputBox>\n        <CategoryFilterTile>Category</CategoryFilterTile>\n        <CategorySearchInput\n          type=\"text\"\n          placeholder=\"search by category...\"\n          value={curCategorySearchKeyword}\n          onChange={handleCategorySearchChangeEvent}\n          onKeyDown={handleArrowKeyDownEvent}\n          ref={categorySearchInputRef} />\n        <CategoryResetIcon onClick={handleCategoryResetIconClick} />\n        <CategorySearchResultBox >\n          <CategorySearchInnerBox>\n            {isCategorySuggestionShow && categories && categories.length > 0 && renderCategoryComponents()}\n          </CategorySearchInnerBox>\n        </CategorySearchResultBox>\n      </CategorySearchInputBox>\n    </div>\n  )\n\n}\n\nexport default styled(CategoryFilter)``\n\n","import * as React from 'react';\nimport { IconProps } from './types';\nimport styled from 'styled-components';\n\n\n\nconst SortI: React.FunctionComponent<IconProps> = (props) => {\n\n  const color = props.color ? props.color : \"#000\";\n\n  return (\n    <svg\n      viewBox=\"0 0 22 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={props.className}\n      onClick={props.onClick}\n    >\n      <path d=\"M5.234 13.83h12.202c1.097 0 1.646 1.214.872 1.922l-6.101 5.579c-.482.44-1.262.44-1.739 0l-6.106-5.579c-.774-.708-.225-1.921.872-1.921zM18.308 8.91L12.207 3.33a1.308 1.308 0 00-1.739 0L4.363 8.91c-.774.707-.225 1.921.872 1.921h12.202c1.097 0 1.646-1.214.872-1.921z\" fill={color} />\n    </svg>\n  )\n}\n\nexport default styled(SortI)`\n  width: ${(props: IconProps) => props.width ? `${props.width}px;` : \"25px;\"}  \n  height: ${(props: IconProps) => props.height ? `${props.height}px;` : \"25px;\"}  \n  color: ${(props: IconProps) => props.color ? `${props.color};` : \"#000;\"}\n  margin: 5px;\n`\n","import { useOutsideClick } from 'hooks/outsideClick';\nimport { useResponsive } from 'hooks/responsive';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { curSortActions, searchKeywordActions } from 'reducers/slices/app';\nimport { updateAnimePaginationDataActions } from 'reducers/slices/domain/anime';\nimport { SortType } from 'src/app';\nimport { mSelector } from 'src/selectors/selector';\nimport styled from 'styled-components';\nimport { BaseInputBtnStyle, BaseInputStyle, device } from 'ui/css/base';\nimport CategoryFilter from '../CategoryFilter';\nimport SortI from '../icons/SortI';\n\nconst SearchInputBox = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  z-index: 1000; \n  position: relative; // need this to make z-index work;\n  background-color: #000; // need this to make z-index work;\n  padding: 5px;\n  height: 50px;\n`\n\nconst SearchInput = styled.input`\n  ${BaseInputStyle}\n`\n\ndeclare type AdditionalControllerBoxPropsType = {\n  open: boolean\n}\n\n\nconst AdditionalControllerBox = styled.div`\n\n  background-color: #000;\n  padding: 5px 0;\n  \n  @media ${device.lteTablet} {\n    position: absolute;\n    z-index: 900; \n    width: 100vw;\n    text-align: center;\n\n    ${(props: AdditionalControllerBoxPropsType) => {\n\n    if (props.open) {\n      return `\n          visibility: visible; \n          transform: translateY(0%);\n        `;\n    } else {\n      return `\n          visibility: hidden;\n          transform: translateY(-100%);\n        `\n    }\n  }}\n    transition: all 0.5s ease-in-out;\n    padding: 5px 0 10px 0;\n  }\n\n  @media ${device.laptop} {\n    display: flex;\n    flex-wrap: nowrap;\n    justify-content: space-around;\n  }\n\n`\n\nconst AdditionalControllerCloseBtn = styled.input`\n  ${BaseInputBtnStyle}\n  font-weight: bold;\n  font-size: 1em;\n  border: 1px solid #fff;\n  padding: 7px;\n  box-shadow: 0px 1px 3px 0px #fff;\n  margin: 30px 5px;\n`\n\n\n\n\nconst SortBox = styled.div`\n  color: #fff;\n`\n\nconst SortItemList = styled.div`\n  @media ${device.mobileL} {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr); \n    grid-template-rows: repeat(2, 1fr); \n  }\n\n  @media ${device.laptop} {\n    display: inline-flex;\n  }\n`\n\n\ndeclare type SortItemPropsType = {\n  active: boolean\n}\nconst SortItem = styled.div`\n  background-color:${(props: SortItemPropsType) => (props.active) ? \"#fff\" : \"#000\"};\n  color:${(props: SortItemPropsType) => (props.active) ? \"#000\" : \"#fff\"};\n  padding: 5px;\n  border: 1px solid #fff;\n  width: 90%;\n  margin: 0 auto;\n  border-radius: 7px;\n\n  @media ${device.mobileL} {\n    width: 95%; \n  }\n\n  @media ${device.laptop} {\n    margin: 0 3px;\n    border-radius: 0;\n  }\n`\n\nconst SortTitle = styled.h3`\n  @media ${device.laptop} {\n    display: inline;\n    margin: 0 8px 0 0;\n  }\n`\n\nconst SortLabel = styled.label`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  padding: 0 5px;\n  cursor: pointer;\n`\n\nexport declare type SearchControllerPropsType = {\n  className?: string\n}\n\nconst SearchController: React.FunctionComponent<SearchControllerPropsType> = ({ \n  className,\n}) => {\n\n  // redux dispatcher\n  const dispatch = useDispatch()\n  \n  // responsive\n  const responsive = useResponsive()\n\n  /**\n   * keyword search feature\n   **/\n  const curSearchKeyword = useSelector(mSelector.makeSearchKeywordSelector())\n  const handleSearchKeywordChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n\n    // update keyword\n    const nextKeyword: string = e.currentTarget.value\n    dispatch(searchKeywordActions.update(nextKeyword))\n\n    // cancel pagination\n    dispatch(updateAnimePaginationDataActions.clear())\n\n  }\n\n  /**\n   * sort feature\n   **/\n  const curSort = useSelector(mSelector.makeCurSortSelector())\n  const sortList = useSelector(mSelector.makeSortListSelector())\n  const handleSortItemChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n\n    // get sort object by its id (e.currentTarget.value)\n    const nextSort: SortType = sortList.find((sort: SortType) => sort.key === e.currentTarget.value)\n\n    // dispatch to update it\n    dispatch(curSortActions.update(nextSort))\n\n    // cancel pagination\n    dispatch(updateAnimePaginationDataActions.clear())\n  }\n\n  const renderSortItemComponents: () => React.ReactNode = () => {\n    return sortList.map((sort: SortType) => {\n      return (\n        <SortItem active={(curSort) ? curSort.key.localeCompare(sort.key) === 0 : false} key={sort.key}>\n          <input\n            type=\"radio\"\n            id={sort.key}\n            value={sort.key}\n            name=\"sort\"\n            style={{ display: \"none\" }}\n            onChange={handleSortItemChangeEvent}\n            checked={(curSort) ? curSort.key.localeCompare(sort.key) === 0 : false}\n          />\n          <SortLabel htmlFor={sort.key}>{sort.label}</SortLabel>\n        </SortItem>\n      )\n    })\n  }\n\n  /**\n   * (mobile&tablet) anime search controller feature\n   *\n   *  - toggle category search & sort\n   **/\n  const [isAdditionalControllerOpen, setAdditionalControllerOpen] = React.useState<boolean>(false)\n  const additionalControllerRef = React.useRef<HTMLDivElement>(null)\n  const handleAdditionalControllerOpenIconClick: React.EventHandler<React.MouseEvent<SVGElement>> = (e) => {\n    setAdditionalControllerOpen((prev: boolean) => !prev)\n  }\n  const handleAdditionalControllerCloseBtnClick: React.EventHandler<React.MouseEvent<HTMLInputElement>> = (e) => {\n    setAdditionalControllerOpen(false);\n  }\n  // close this when users click outside\n  useOutsideClick({\n    callback: () => setAdditionalControllerOpen(false),\n    ref: additionalControllerRef,\n  })\n\n\n  return (\n      <div className={className}>\n        <SearchInputBox>\n          <SearchInput type=\"text\" placeholder=\"search any anime...\" name=\"search-keyword\" value={curSearchKeyword} onChange={handleSearchKeywordChangeEvent} />\n          {(responsive.isLTETablet &&\n            <SortI color={\"#fff\"} onClick={handleAdditionalControllerOpenIconClick} />\n          )}\n        </SearchInputBox>\n        <AdditionalControllerBox open={isAdditionalControllerOpen} ref={additionalControllerRef}>\n          <CategoryFilter />\n          <SortBox>\n            <SortTitle>Sort</SortTitle>\n            <SortItemList>\n              {renderSortItemComponents()}\n            </SortItemList>\n          </SortBox>\n          {(responsive.isLTETablet &&\n            <AdditionalControllerCloseBtn type=\"button\" value=\"Close\" onClick={handleAdditionalControllerCloseBtnClick} />\n          )}\n        </AdditionalControllerBox>\n      </div>\n  )\n}\n\nexport default styled(SearchController)`\n  background-color: #000;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  @media ${device.laptop} {\n    flex: 0 0 15%;\n  }\n  z-index: 1000;\n`\n\n\n","import { UseOutsideClick } from \"./types\";\nimport * as React from \"react\";\n\nexport const useOutsideClick = (input: UseOutsideClick): void => {\n\n  React.useEffect(() => {\n\n    const handleOutsideClickEvent = (e: Event) => {\n      if (input.ref.current.contains(e.target as Node)) {\n        return;\n      }\n      input.callback()\n    }\n    document.addEventListener('mousedown', handleOutsideClickEvent, false)\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleOutsideClickEvent, false)\n    }\n  })\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { device } from 'ui/css/base';\nimport { AnimeType } from 'domain/anime';\nimport { toStringToDateToString } from 'src/utils';\n\n\nconst AnimeTitle = styled.h2`\n  \n`\nconst AnimeReleased = styled.p``\n\nconst AnimeAverageRating = styled.p``\n\nconst AnimeTrailerLink = styled.a`\n  text-decoration: none;\n  color: #fff;\n  border: 1px solid #fff;\n  padding: 7px;\n  box-shadow: 0px 1px 3px 0px #fff;\n`\n\nconst AnimeDescription = styled.p`\n  font-weight: normal;\n`\n\nexport declare type AnimeDetailPropsType = {\n  anime: AnimeType\n  className?: string\n}\n\nconst AnimeDetailForLarge: React.FunctionComponent<AnimeDetailPropsType> = ({\n  anime,\n  className\n}) => {\n\n  return (\n    <div className={className}>\n      <AnimeTitle>\n        {anime.attributes.canonicalTitle}\n      </AnimeTitle>\n      <AnimeReleased>\n        Release Date: {toStringToDateToString(anime.attributes.startDate)}\n      </AnimeReleased>\n      <AnimeAverageRating>\n        Average Rating: {anime.attributes.averageRating}\n      </AnimeAverageRating>\n      <AnimeDescription>\n        {anime.attributes.description}\n      </AnimeDescription>\n      <AnimeTrailerLink href={`https://youtu.be/${anime.attributes.youtubeVideoId}`} target=\"_blank\">\n        Watch The Trailer\n      </AnimeTrailerLink>\n    </div>\n  )\n}\n\nexport default styled(AnimeDetailForLarge)`\n\n  background-color: rgba(0, 0, 0, 0.7);\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  color: #fff;\n  text-align: center;\n  padding: 10px;\n\n  word-break: break-all;\n  white-space: normal;\n  font-weight: bold;\n  transition: all 0.5s;\n\n  @media ${device.laptop} {\n    opacity: 0;\n    visibility: hidden;\n\n    position: absolute; \n  }\n\n`\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport AnimeDetailForLarge from '../AnimeDetailForLarge';\nimport { device } from 'ui/css/base';\nimport { AnimeType } from 'domain/anime';\nimport { useResponsive } from 'hooks/responsive';\n\nconst AnimeImage = styled.img`\n  vertical-align: middle; //(image-vertical-align)\n  max-height: 100%;\n  max-width: auto;\n  box-shadow: 0px 7px 15px -2px rgb(84, 84, 84);\n`\n\n// need this to center image vertically (image-vertical-align)\nconst AnimeImageHelper = styled.span`\n  display: inline-block; //(image-vertical-align)\n  height: 100%; //(image-vertical-align)\n  vertical-align: middle; //(image-vertical-align)\n\n`\n\nexport declare type AnimePropsType = {\n  anime: AnimeType\n  curAnimeListRefs: React.MutableRefObject<HTMLDivElement[]> \n  index: number\n  handleAnimeClickEvent: React.EventHandler<React.MouseEvent<HTMLImageElement>>\n  className?: string // this is required by 'styled-components` to wrap non-styled component (normal react component)\n}\n\nconst Anime: React.FunctionComponent<AnimePropsType> = ({\n  anime,\n  curAnimeListRefs,\n  index,\n  handleAnimeClickEvent,\n  className\n}) => {\n  \n  // responsive\n  const responsive = useResponsive()\n\n  return (\n    <div ref={(el: HTMLDivElement) => curAnimeListRefs.current[index] = el} className={className}>\n      <AnimeImageHelper />\n      {(responsive.isMobile &&\n        <React.Fragment>\n          <AnimeImage\n            src={anime.attributes.posterImage.small}\n            alt={`${anime.attributes.titles.en} post image`}\n            data-anime-id={anime.id}\n            onClick={handleAnimeClickEvent}\n          />\n        </React.Fragment>\n      )}\n      {(responsive.isTablet &&\n        <AnimeImage\n          src={anime.attributes.posterImage.medium}\n          alt={`${anime.attributes.titles.en} post image`}\n          data-anime-id={anime.id}\n          onClick={handleAnimeClickEvent}\n        />\n      )}\n      {(responsive.isLaptop &&\n        <React.Fragment>\n          <AnimeImage src={anime.attributes.posterImage.large} alt={`${anime.attributes.titles.en} post image`} />\n          <AnimeDetailForLarge\n            anime={anime}\n          />\n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n\nexport default styled(Anime)`\n\n  // inline-flex: make the container inline, which means that the next element comes next horizontally. (not jump to next line)\n  // flex: make the container block, which means that the next element comes next vertically.\n\n  display: inline-block; //(image-vertical-align)\n  margin: 10px;\n  height: 90%; //(image-vertical-align)\n\n  position: relative;\n\n  &:hover > ${AnimeDetailForLarge} {\n    opacity: 1;\n    visibility: visible;\n  }\n\n  @media ${device.mobileOnly} {\n  }\n`\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { device, BaseInputBtnStyle } from 'ui/css/base';\nimport { AnimeType } from 'domain/anime';\nimport { toStringToDateToString } from 'src/utils';\n\n\nconst AnimeTitle = styled.h2`\n  \n`\nconst AnimeReleased = styled.p``\n\nconst AnimeAverageRating = styled.p``\n\nconst AnimeTrailerLink = styled.a`\n  text-decoration: none;\n  color: #fff;\n  border: 1px solid #fff;\n  padding: 7px;\n  box-shadow: 0px 1px 3px 0px #fff;\n`\n\nconst AnimeDescription = styled.p`\n  font-weight: normal;\n`\n\nconst AnimeDetailControllerBox = styled.div`\n  \n  @media ${device.lteTablet} {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n  }\n`\n\nconst AnimeDetailCloseBtn = styled.input`\n  ${BaseInputBtnStyle}\n  font-weight: bold;\n  font-size: 1em;\n\n  border: 1px solid #fff;\n  padding: 7px;\n  box-shadow: 0px 1px 3px 0px #fff;\n`\n\nexport declare type AnimeDetailForSmallPropsType = {\n  curSelectedAnime: AnimeType\n  open: boolean\n  handleAnimeDetailBoxCloseEvent: React.EventHandler<React.MouseEvent<HTMLInputElement>>\n  className?: string\n}\n\nconst AnimeDetailForSmall: React.FunctionComponent<AnimeDetailForSmallPropsType> = ({\n  curSelectedAnime,\n  open,\n  handleAnimeDetailBoxCloseEvent,\n  className,\n}) => {\n\n  return ( open &&\n    <div className={className}>\n      <AnimeTitle>\n        {curSelectedAnime.attributes.canonicalTitle}\n      </AnimeTitle>\n      <AnimeReleased>\n        Release Date: {toStringToDateToString(curSelectedAnime.attributes.startDate)}\n      </AnimeReleased>\n      <AnimeAverageRating>\n        Average Rating: {curSelectedAnime.attributes.averageRating}\n      </AnimeAverageRating>\n      <AnimeDetailControllerBox>\n        <AnimeTrailerLink href={`https://youtu.be/${curSelectedAnime.attributes.youtubeVideoId}`} target=\"_blank\">\n          Watch The Trailer\n            </AnimeTrailerLink>\n        <AnimeDetailCloseBtn type=\"button\" value=\"Close\" onClick={handleAnimeDetailBoxCloseEvent} />\n      </AnimeDetailControllerBox>\n      <AnimeDescription>\n        {curSelectedAnime.attributes.description}\n      </AnimeDescription>\n    </div>\n  )\n}\n\nexport default styled(AnimeDetailForSmall)`\n\n  background-color: rgba(0, 0, 0, 0.7);\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  color: #fff;\n  text-align: center;\n  padding: 10px;\n\n  word-break: break-all;\n  white-space: normal;\n  font-weight: bold;\n  transition: all 0.5s;\n\n  @media ${device.lteTablet} {\n    position: fixed;\n    z-index: 2000; \n\n    ${(props: AnimeDetailForSmallPropsType) => {\n    if (props.open) {\n      return `\n          opacity: 1;\n          visibility: visible;\n        `\n    } else {\n      return `\n          opacity: 0;\n          visibility: hidden;\n        `\n    }\n  }}\n  }\n\n  @media ${device.laptop} {\n    opacity: 0;\n    visibility: hidden;\n\n    position: absolute; \n  }\n\n  \n`\n\n","import * as React from 'react';\nimport './style.scss';\n\n\nconst Loading: React.FunctionComponent<{}> = (props) => {\n\n  return (\n    <div className=\"loading-wrapper\">\n      <div className=\"loading-box\">\n        <div className=\"lds-ellipsis\" role=\"loading-icon\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n        <div className=\"loading-message\">{\"loading ...\"}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Loading; \n\n","import { AnimeType } from 'domain/anime';\nimport { useResponsive } from 'hooks/responsive';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearAllSortAndFilterActionCreator, curCategorySearchKeywordActions } from 'reducers/slices/app';\nimport { FetchStatusEnum } from 'src/app';\nimport { mSelector } from 'src/selectors/selector';\nimport styled from 'styled-components';\nimport { BaseInputBtnStyle } from 'ui/css/base';\nimport Anime from '../Anime';\nimport AnimeDetailForSmall from '../AnimeDetailForSmall';\nimport Loading from '../Loading';\n\nconst NoResultBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  flex-direction: column;\n`\n\nconst NoResultMessage = styled.p`\n  color: #fff;\n`\n\nconst ClearAllSortAndFilterBtn = styled.input`\n  ${BaseInputBtnStyle}\n  font-weight: bold;\n  font-size: 1em;\n  border: 1px solid #fff;\n  padding: 7px;\n  box-shadow: 0px 1px 3px 0px #fff;\n  margin: 30px 5px;\n`\n\nconst ItemList = styled.div`\n\n  overflow: hidden;\n  white-space: nowrap;\n  width: 100vw;\n  height: 100%;\n\n  /* hide scroll (horizontal) bar */\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none;  /* Internet Explorer 10+ */\n\n  &::-webkit-scrollbar { /* WebKit */\n    width: 0;\n    height: 0;\n  }\n`\n\nexport declare type SearchResultPropsType = {\n  className?: string // this is required by 'styled-components` to wrap non-styled component (normal react component)\n}\n\nconst SearchResult: React.FunctionComponent<SearchResultPropsType> = ({\n  className,\n}) => {\n\n  // redux dispatcher\n  const dispatch = useDispatch()\n\n  // responsive\n  const responsive = useResponsive()\n\n  /**\n   * current anime list\n   **/\n  const curAnimes: AnimeType[] = useSelector(mSelector.makeAnimeDataSelector())\n\n  /**\n   * anime list item horizontal scroll\n   **/\n  const unitScrollMove = 50;\n\n  // laptop & desktop: we need to use onWheel\n  const curAnimeListRefs = React.useRef<HTMLDivElement[]>([]);\n  const curScrollPosXRef = React.useRef<number>(0)\n  const handleHorizontalWheelEvent: React.EventHandler<React.WheelEvent<HTMLDivElement>> = (e) => {\n    // deltaY is used to determine wheel is up or down \n    // return \"+\" value when scroll down\n    // return \"-\" value when scroll up \n    if (curAnimeListRefs.current.length === 0) return false\n\n    const maxWidth = - (e.currentTarget.scrollWidth - e.currentTarget.clientWidth)\n\n    if (e.deltaY > 0) {\n\n      // scroll down\n      if (curScrollPosXRef.current <= maxWidth) return false\n      curScrollPosXRef.current -= unitScrollMove\n\n    } else if (e.deltaY < 0) {\n\n      // scroll up \n      if (curScrollPosXRef.current >= 0) return false\n      curScrollPosXRef.current += unitScrollMove\n    }\n\n    // scroll with transform\n    for (let i = 0; i < curAnimeListRefs.current.length; i++) {\n      curAnimeListRefs.current[i].style.transform = `translate3d(${curScrollPosXRef.current}px, 0, 0)`\n      curAnimeListRefs.current[i].style.transition = `transform 1s`\n    }\n  }\n\n  // mobile & tablet swipe\n\n  // (ref) current position where touch starts\n  const curTouchStart = React.useRef<number>(0)\n  // event handler triggered when a user starts touching the screen\n  const handleTouchStartEvent: React.EventHandler<React.TouchEvent<HTMLDivElement>> = React.useCallback((e) => {\n    curTouchStart.current = e.touches[0].clientX\n  }, [\n    ])\n\n  // event handler triggered when a user ends touching the screen\n  const handleTouchMoveEvent: React.EventHandler<React.TouchEvent<HTMLDivElement>> = React.useCallback((e) => {\n\n    // get the position where the user ends touching\n    const curTouchEnd = e.touches[0].clientX\n\n    // get max scroll width\n    const maxWidth = - (e.currentTarget.scrollWidth - e.currentTarget.clientWidth)\n\n    // decide the right/left swipe based on the curTouchStart and curTouchEnd\n    if (curTouchEnd > curTouchStart.current) {\n\n      // right swipe\n      if (curScrollPosXRef.current >= 0) return false\n      curScrollPosXRef.current += unitScrollMove\n\n    } else if (curTouchEnd < curTouchStart.current) {\n\n      // left swipe\n      if (curScrollPosXRef.current <= maxWidth) return false\n      curScrollPosXRef.current -= unitScrollMove\n\n    }\n\n    // scroll with transform\n    for (let i = 0; i < curAnimeListRefs.current.length; i++) {\n      curAnimeListRefs.current[i].style.transform = `translate3d(${curScrollPosXRef.current}px, 0, 0)`\n      curAnimeListRefs.current[i].style.transition = `transform 1s`\n    }\n  }, [\n    ])\n\n  /**\n   * (mobile & table) detail modal feature\n   *  - display this detail modal when user click an anime item\n   **/\n  const [isAnimeDetailModalOpen, setAnimeDetailModalOpen] = React.useState<boolean>(false)\n  const [curSelectedAnime, setSelectedAnime] = React.useState<AnimeType>(null)\n\n  const handleAnimeClickEvent: React.EventHandler<React.MouseEvent<HTMLDivElement>> = (e) => {\n    const nextAnimeId = e.currentTarget.getAttribute(\"data-anime-id\")\n\n    // find anime\n    const nextAnime = curAnimes.find((anime: AnimeType) => anime.id == nextAnimeId)\n\n    // update local state\n    setSelectedAnime(nextAnime)\n\n    // open the modal\n    setAnimeDetailModalOpen(true)\n  }\n\n  const handleAnimeDetailBoxCloseEvent: React.EventHandler<React.MouseEvent<HTMLInputElement>> = (e) => {\n    setAnimeDetailModalOpen(false)\n  }\n\n  /**\n   * loading logic\n   *  - display loading component until we done with fetching\n   **/\n  const isLoading: FetchStatusEnum = useSelector(mSelector.makeFetchStatusSelector())\n\n  /**\n   * no result feature\n   *  - put 'clear all sort & filter btn to cancel all of them.\n   **/\n  const handleClearAllSortAndFilterBtn: React.EventHandler<React.MouseEvent<HTMLInputElement>> = (e) => {\n    dispatch(curCategorySearchKeywordActions.clear())\n    dispatch(clearAllSortAndFilterActionCreator())\n  }\n\n  /**\n   * render anime components\n   *\n   **/\n  const renderAnimeComponents: () => React.ReactNode = () => {\n    return curAnimes.map((anime: AnimeType, index: number) => {\n      return (\n        <Anime\n          key={anime.id}\n          anime={anime}\n          curAnimeListRefs={curAnimeListRefs}\n          index={index} // array index used for this array refs\n          handleAnimeClickEvent={handleAnimeClickEvent}\n        />\n      )\n    })\n  }\n\n  // styled components: you need to set className prop to make styled components work\n  return (\n    <div className={className}>\n      {(isLoading === FetchStatusEnum.FETCHING &&\n        <Loading />\n      )}\n      {((isLoading === FetchStatusEnum.FAILED || curAnimes.length === 0) &&\n        <NoResultBox>\n          <NoResultMessage>\n            Opps, We don't have any anime here.\n            </NoResultMessage>\n          <ClearAllSortAndFilterBtn type=\"button\" value=\"Clear All Sort & Filter\" onClick={handleClearAllSortAndFilterBtn} />\n        </NoResultBox>\n      )}\n      {(isLoading === FetchStatusEnum.SUCCESS && curAnimes.length > 0 &&\n        <ItemList\n          onTouchStart={handleTouchStartEvent}\n          onTouchMove={handleTouchMoveEvent}\n          onWheel={handleHorizontalWheelEvent}\n        >\n          {renderAnimeComponents()}\n        </ItemList>\n      )}\n      {/** anime detail (only mobile & tablet) **/}\n      {(curSelectedAnime && responsive.isLTETablet &&\n        <AnimeDetailForSmall\n          curSelectedAnime={curSelectedAnime}\n          open={isAnimeDetailModalOpen}\n          handleAnimeDetailBoxCloseEvent={handleAnimeDetailBoxCloseEvent}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default styled(SearchResult)`\n  padding-top: 85px; // space for header controller\n  height: 100%;\n`\n\n","import * as React from 'react';\nimport { IconProps } from './types';\nimport styled from 'styled-components';\n\nconst SwipeArrowI: React.FunctionComponent<IconProps> = (props) => {\n\n  const color = props.color ? props.color : \"#fff\";\n\n  return (\n    <svg \n      viewBox=\"0 0 14 20\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={props.className}\n      onClick={props.onClick}>\n        <path \n          d=\"M11.8 10.3l-6.68 6.374c-.46.44-1.207.44-1.664 0l-1.11-1.06a1.085 1.085 0 010-1.588L7.08 9.507 2.346 4.988a1.085 1.085 0 010-1.589L3.451 2.33a1.213 1.213 0 011.665 0l6.678 6.375c.467.441.467 1.154.005 1.594z\" \n          fill={color}\n        />\n   </svg>\n  )\n}\n\nexport default SwipeArrowI \n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { device, ShowUpKeyFrames } from 'ui/css/base';\nimport SwipeArrowI from '../icons/SwipeArrowI';\nimport { useResponsive } from 'hooks/responsive';\nimport { useOrientation } from 'hooks/orientation';\nimport { OrientationEnum } from 'hooks/orientation/types';\n\n\nconst Box = styled.div`\n  position: fixed;\n  bottom: 10%;\n  text-align: center;\n  left: 50%;\n  transform: translateX(-50%);\n`\nconst InnerBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: nowrap;\n\n  & svg:nth-child(1) {\n    animation: ${ShowUpKeyFrames} 1s 1s 5;\n  }\n  & svg:nth-child(2) {\n    animation: ${ShowUpKeyFrames} 1s 1.1s 5;\n  }\n  & svg:nth-child(3) {\n    animation: ${ShowUpKeyFrames} 1s 1.2s 5 ;\n  }\n  & svg:nth-child(4) {\n    animation: ${ShowUpKeyFrames} 1s 1.3s 5;\n  }\n`\n\nconst AnimatedSwipeArrowI = styled(SwipeArrowI)`\n  width: 25px;  \n  height: 25px;  \n  color: #fff; \n  opacity: 0;\n  visibility: hidden;\n`\n\nconst Message = styled.div`\n  color: #fff;\n  opacity: 0;\n  visiblity: hidden;\n  animation: ${ShowUpKeyFrames} 1s 1.4s 5;\n  text-transform: uppercase;\n`\n\nconst SwipeAnimation: React.FunctionComponent<{}> = (props) => {\n\n  const responsive = useResponsive()\n\n  return (\n    <Box>\n      <InnerBox>\n        <AnimatedSwipeArrowI />       \n        <AnimatedSwipeArrowI />       \n        <AnimatedSwipeArrowI />       \n        <AnimatedSwipeArrowI />       \n      </InnerBox>\n        {(responsive.isTouchDevice && \n          <Message>\n            Swipe Right \n          </Message>\n        )}\n        {(!responsive.isTouchDevice && \n          <Message>\n            Scroll Down \n          </Message>\n        )}\n    </Box>\n  )\n}\n\nexport default SwipeAnimation \n\n","import Pagination from 'components/common/Pagination';\nimport SearchController from 'components/common/SearchController';\nimport SearchResult from 'components/common/SearchResult';\nimport SwipeAnimation from 'components/common/SwipeAnimation';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAnimeActionCreator, updateAnimePaginationDataActions } from 'reducers/slices/domain/anime';\nimport { mSelector } from 'src/selectors/selector';\nimport { convertPageToOffset } from 'src/utils';\nimport { DomainPaginationType } from 'states/types';\nimport styled from 'styled-components';\nimport { device } from 'ui/css/base';\n\nconst SearchBox = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: #000;\n`\n\nconst Search: React.FunctionComponent<{}> = (props) => {\n\n  // redux dispatcher\n  const dispatch = useDispatch()\n\n  // common redux states \n  //   - required by useEffect for fetching\n  const curSort = useSelector(mSelector.makeCurSortSelector())\n  const curSearchKeyword = useSelector(mSelector.makeSearchKeywordSelector())\n  const curCategory = useSelector(mSelector.makeCurCategorySelector())\n\n  /**\n   * pagination\n   **/\n  const curPagination: DomainPaginationType = useSelector(mSelector.makeAnimePaginationDataSelector())\n\n  /**\n   * onClick event handler for pagination click\n   *\n   *  - update pagination object of this domain in store\n   *  - useEffect takes care of re-fetching\n   *\n   *  - use boolean local state (isPageUpdated) to avoid re-rendering twice\n   *    - this is because pagination need to be updated during fetching worker (redux-saga)\n   *  - \n   **/\n  const [isPageUpdated, setPageUpdated] = React.useState<boolean>(false)\n  const handlePaginationClickEvent: React.EventHandler<React.MouseEvent<HTMLInputElement>> = (e) => {\n\n    // prep next pagiantion\n    const nextPagination: DomainPaginationType = {\n      limit: curPagination.limit,\n      offset: convertPageToOffset(curPagination.total, curPagination.limit, parseInt(e.currentTarget.value)),\n      total: curPagination.total\n    }\n\n    // update state\n    dispatch(updateAnimePaginationDataActions.update(nextPagination))\n\n    // update pagination boolean (local state)\n    setPageUpdated((prev: boolean) => !prev)\n  }\n\n\n  /**\n   * initial anime fetch (only once)\n   *\n   *  - don't put pagination data into 2nd argument. => this cause fetch twice every time you change sort | filter | keyword\n   *    - instead, put pagination bool local state\n   *  \n   **/\n  React.useEffect(() => {\n    dispatch(fetchAnimeActionCreator())\n  }, [\n      curSearchKeyword,\n      JSON.stringify(curSort),\n      isPageUpdated,\n      curCategory.id,\n    ])\n\n\n  /**\n   * anime list item horizontal scroll\n   **/\n  return (\n    <SearchBox>\n      {/** left side bar: sort & filter **/}\n      <SearchController />\n      {/** main: search result list **/}\n      <SearchResult />\n      {/** pagination **/}\n      {(curPagination &&\n        <Pagination\n          limit={curPagination.limit}\n          offset={curPagination.offset}\n          total={curPagination.total}\n          btnNum={5}\n          onClick={handlePaginationClickEvent}\n        />\n      )}\n      <SwipeAnimation />\n    </SearchBox>\n  )\n}\n\nexport default Search\n\n","import * as React from 'react';\nimport Search from '../Search';\n\nconst Content: React.FunctionComponent<{}> = (props) => {\n\n  return (\n    <div className=\"content-wrapper\">\n      <Search />      \n    </div>\n  )\n}\n\nexport default Content\n","import { createSlice, PayloadAction, createAction } from '@reduxjs/toolkit'\n/**\n * if use 'createSlice', you CAN mutate its state directly safely. this is because \n * the reducers are passed to 'createReducer' (builtin function by redux/toolkit). it create a new object using the state.\n **/\n\n/**\n *\n * an action to reset cache with no after effect (e.g., requestTracker, domains)\n *\n **/\nexport const toggleLeftNavMenuActionCreator = createAction(\"rs/ui/leftNavMenu/toggle\")\nexport const toggleLeftNavMenuActionTypeName = toggleLeftNavMenuActionCreator().type\n\n\n/**\n * ui.leftNavMenu state Slice\n **/\nexport const leftNavMenuSlice = createSlice({ \n  name: \"ui/leftNavMenu\", // a name used in action type\n  initialState: false, \n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    open: (state: boolean) => true,\n    close: (state: boolean) => false,\n    toggle: (state: boolean) => !state,\n  }\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n}) \n\nexport const leftNavMenuSliceReducer = leftNavMenuSlice.reducer\nexport const leftNavMenuActions = leftNavMenuSlice.actions\n\n\n/**\n * ui.rightNavMenu state Slice\n **/\nexport const rightNavMenuSlice = createSlice({ \n  name: \"ui/rightNavMenu\", // a name used in action type\n  initialState: false, \n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    open: (state: boolean) => true,\n    close: (state: boolean) => false,\n    toggle: (state: boolean) => !state,\n  }\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n}) \n\nexport const rightNavMenuSliceReducer = rightNavMenuSlice.reducer\nexport const rightNavMenuActions = rightNavMenuSlice.actions\n\n\n/**\n * ui.searchModal state Slice\n **/\nexport const searchModalSlice = createSlice({ \n  name: \"ui/searchModal\", // a name used in action type\n  initialState: false, \n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    open: (state: boolean) => true,\n    close: (state: boolean) => false,\n    toggle: (state: boolean) => !state,\n  }\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n}) \n\nexport const searchModalSliceReducer = searchModalSlice.reducer\nexport const searchModalActions = searchModalSlice.actions\n","import { combineReducers } from 'redux';\nimport { categoryFetchStatusSliceReducer, curCategorySearchKeywordSliceReducer, curCategorySliceReducer, curSortSliceReducer, fetchStatusSliceReducer, requestTrackerSliceReducer, searchKeywordSliceReducer, sortListSliceReducer } from './slices/app';\nimport { updateAnimeCurItemsDataSliceReducer, updateAnimeDataSliceReducer, updateAnimePaginationDataSliceReducer } from './slices/domain/anime';\nimport { categoryDataSliceReducer } from './slices/domain/categories';\nimport { leftNavMenuSliceReducer, rightNavMenuSliceReducer, searchModalSliceReducer } from './slices/ui';\n\n// ** REFACTOR to new approach **/\n\n/**\n * new rootReducer\n **/\nexport const rootReducer = combineReducers({\n\n  ui: combineReducers({\n    leftNavMenu: leftNavMenuSliceReducer,\n    rightNavMenu: rightNavMenuSliceReducer,\n    searchModal: searchModalSliceReducer,\n  }),\n\n  app: combineReducers({\n    searchKeyword: searchKeywordSliceReducer,\n    fetchStatus: fetchStatusSliceReducer,\n    categoryFetchStatus: categoryFetchStatusSliceReducer,\n    curCategory: curCategorySliceReducer,\n    curCategorySearchKeyword: curCategorySearchKeywordSliceReducer,\n    curSort: curSortSliceReducer,\n    sortList: sortListSliceReducer,\n    requestTracker: requestTrackerSliceReducer,\n  }),\n\n  domain: combineReducers({\n    animes: combineReducers({\n      data: updateAnimeDataSliceReducer, // naming wierd. just remove 'update' when #REFACTOR\n      pagination: updateAnimePaginationDataSliceReducer, // naming wierd. just remove 'update' when #REFACTOR\n      curItems: updateAnimeCurItemsDataSliceReducer, // naming wierd. just remove 'update' when #REFACTOR\n    }),\n    categories: categoryDataSliceReducer,\n  })\n})\n\n","import { RequestTrackerType } from \"src/app\";\nimport { select } from \"redux-saga/effects\";\nimport { mSelector } from \"src/selectors/selector\";\n\n/**\n *\n * request url check worker. \n *\n * This worker is a nested worker. called by 'requestDomainWorker' and 'DomainFilterWorker'.\n *\n * \n * check the request url has requested in the past\n * if so, don't need to do anything since data exists in store \n * if no, prep for request to backend api\n *\n * Issues:\n *\n *  #1: this logic does not work if two same request dispatched at the same time. (esp with takeEvery).\n *    - takeEvery pick every action and execute its worker. so if two same request (e.g., same endpoint) at the same time, 'requestList' state does not contain that url and allow to dispatch the two request. \n *\n *    - workaround: change 'takeEvery' to 'takeLatest'.\n *      - takeLatest pick the action and cancel the previous action if it hasn't done yet.\n **/\nexport function* requestUrlCheckWorker(targetUrl: string) {\n\n  // get requestList state from redux store \n  // * you need to use 'yield' with 'select'\n  // does this 'yield' pause code here??\n  const requestTrackerState: RequestTrackerType  = yield select(mSelector.makeRequestTrackerSelector())\n\n  // check the target url already exist in requestList state\n  // 'find' function return 'undefined' when it could not satisfied the condition.\n  \n  const isExist = Object.prototype.hasOwnProperty.call(requestTrackerState, targetUrl)\n\n  if (!isExist) {\n    // target url does not exist in requestUrl, so need to fetch from backend api\n    return null \n\n  } else {\n    // target url exists in requestUrl, so guide to cache (redux-store) because data already exist in it\n    // don't need to do anything.\n    return requestTrackerState[targetUrl]\n\n  }\n}\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport axios, { AxiosPromise, AxiosRequestConfig } from 'axios';\nimport { normalize } from \"normalizr\";\nimport { fetchStatusActions, requestTrackerActions } from \"reducers/slices/app\";\nimport { updateAnimeCurItemsDataActions, updateAnimeDataActions, updateAnimePaginationDataActions } from \"reducers/slices/domain/anime\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { FetchStatusEnum, SortType, RequestTrackerBaseType } from \"src/app\";\nimport { mSelector } from \"src/selectors/selector\";\nimport { animeSchemaArray } from \"states/state\";\nimport { DomainPaginationType } from \"states/types\";\nimport { CategoryType } from \"domain/category\";\nimport { requestUrlCheckWorker } from \"./requestUrlCheckWorker\";\nimport isEmpty from 'lodash';\n\n/**\n * a worker (generator)    \n *  \n **/\nexport function* fetchAnimeWorker(action: PayloadAction<{}>) {\n\n\n  /**\n   * get current pagination for this fetching\n   **/\n  // #DOUBT: is it ok to use memorized selector inside rs worker\n  const curPagination: DomainPaginationType = yield select(mSelector.makeAnimePaginationDataSelector())\n\n  /**\n   * get current keyword for seach\n   **/\n  const curKeyword: string = yield select(mSelector.makeSearchKeywordSelector())\n\n  /**\n   * get current category for search\n   **/\n  const curCategory: CategoryType = yield select(mSelector.makeCurCategorySelector())\n\n  /**\n   * get current sort for search\n   **/\n  const curSort: SortType = yield select(mSelector.makeCurSortSelector())\n\n  /**\n   * check request url already done before.\n   *\n   *  - if so, we don't need to fetch again\n   **/\n\n  // prep keyword if necessary\n  let targetUrl = `https://kitsu.io/api/edge/anime?page[limit]=${curPagination.limit}&page[offset]=${curPagination.offset}`\n  if (curKeyword) {\n    targetUrl += `&filter[text]=${curKeyword}`\n  }\n  if (curCategory && curCategory.id != -1) { // default category id is -1 so exclude this also\n    targetUrl += `&filter[categories]=${curCategory.attributes.title}`\n  }\n  if (curSort) {\n    targetUrl += `&sort=${curSort.key}`\n  }\n\n  // return empty object if does not exist\n  const targetRequestTrackerBase: RequestTrackerBaseType = yield call(requestUrlCheckWorker, targetUrl)\n\n  if (targetRequestTrackerBase) {\n    // target url exists\n\n    /**\n     * update curItems of this request\n     **/\n    yield put(\n      updateAnimeCurItemsDataActions.update(targetRequestTrackerBase.ids)\n    )\n    /**\n     * update anime domain pagination in state\n     **/\n\n    yield put(\n      updateAnimePaginationDataActions.update(targetRequestTrackerBase.pagination)\n    )\n\n  } else {\n    // target url does not exist\n    \n    /**\n     * update status for anime data\n     **/\n    yield put(\n      fetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * fetch data\n     **/\n    try {\n\n\n      // start fetching\n      const response = yield call<(config: AxiosRequestConfig) => AxiosPromise>(axios, {\n        method: \"get\",\n        url: targetUrl,\n      })\n\n      /**\n       * normalize response data\n       **/\n      const normalizedData = normalize(response.data.data, animeSchemaArray)\n\n      /**\n       * update anime domain in state\n       *\n       **/\n      yield put(\n        updateAnimeDataActions.merge(normalizedData.entities.animes)\n      )\n\n      /**\n       * update anime domain pagination in state\n       *  - update only 'total'\n       **/\n\n      yield put(\n        updateAnimePaginationDataActions.update({\n          limit: curPagination.limit,\n          offset: curPagination.offset,\n          total: response.data.meta.count // total count path is 'response.data.meta.count'\n        })\n      )\n\n      /**\n       * update curItems of this request\n       **/\n      yield put(\n        updateAnimeCurItemsDataActions.update(normalizedData.result)\n      )\n\n      /**\n       * update requestTracker to keep this target url and result (curItems)\n       **/\n      yield put(\n        requestTrackerActions.update({\n          [targetUrl]: {\n            ids: normalizedData.result,\n            pagination: {\n              limit: curPagination.limit,\n              offset: curPagination.offset,\n              total: response.data.meta.count // total count path is 'response.data.meta.count'\n            } \n          }\n        })\n      )\n\n      /**\n       * update fetch status sucess\n       **/\n      yield put(\n        fetchStatusActions.update(FetchStatusEnum.SUCCESS)\n      )\n\n    } catch (error) {\n\n      console.log(error)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        fetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n    }\n  }\n\n}\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport axios, { AxiosPromise, AxiosRequestConfig } from 'axios';\nimport { categoryFetchStatusActions } from \"reducers/slices/app\";\nimport { categoryDataActions } from \"reducers/slices/domain/categories\";\nimport { call, put } from \"redux-saga/effects\";\nimport { FetchStatusEnum } from \"src/app\";\n\n/**\n * a worker (generator)    \n *\n *  - only run this once to get all categories and store it in the store.\n *  \n **/\nexport function* fetchCategoryWorker(action: PayloadAction<{}>) {\n\n\n  /**\n   * update status for anime data\n   **/\n  yield put(\n    categoryFetchStatusActions.update(FetchStatusEnum.FETCHING)\n  )\n\n  /**\n   * fetch data\n   **/\n  try {\n\n    // prep keyword if necessary\n    \n    /**\n     * grab all categories\n     *  - might be better way to do this category filtering #PERFORMANCE\n     **/\n    const targetUrl = `https://kitsu.io/api/edge/categories?page[limit]=300`\n\n    // start fetching\n    const response = yield call<(config: AxiosRequestConfig) => AxiosPromise>(axios, {\n      method: \"get\",\n      url: targetUrl,\n    })\n\n    /**\n     * update categories domain in state\n     *\n     **/\n    yield put(\n      categoryDataActions.update(response.data.data)\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      categoryFetchStatusActions.update(FetchStatusEnum.SUCCESS)\n    )\n\n  } catch (error) {\n\n    console.log(error)\n\n    /**\n     * update fetch status failed\n     **/\n    yield put(\n      categoryFetchStatusActions.update(FetchStatusEnum.FAILED)\n    )\n  }\n}\n\n\n\n","import { PayloadAction, Action } from \"@reduxjs/toolkit\";\nimport { put } from \"redux-saga/effects\";\nimport { leftNavMenuActions } from \"reducers/slices/ui\";\n\n/**\n * a worker (generator)    \n *  \n **/\nexport function* leftNavMenuWorkerWorker(action: PayloadAction<{}>) {\n\n  yield put(\n    leftNavMenuActions.toggle()\n  )\n}\n\n","import { fetchAnimeActionTypeName } from 'reducers/slices/domain/anime';\nimport { fetchCategoryActionTypeName } from 'reducers/slices/domain/categories';\nimport { toggleLeftNavMenuActionTypeName } from 'reducers/slices/ui';\nimport { takeEvery, takeLatest, throttle } from 'redux-saga/effects';\nimport { fetchAnimeWorker } from 'sideEffects/workers/fetchAnimeWorker';\nimport { fetchCategoryWorker } from 'sideEffects/workers/fetchCategoryWorker';\nimport { leftNavMenuWorkerWorker } from 'sideEffects/workers/leftNavMenuWorker';\n\n/**\n * takeEvery: allows multiple worker instances to be started CONCURRENTLY.\n * takeLatest: cancel pending when there is a new one.\n * throttle: type ahead stuff.\n\n/**\n *  watcher\n **/\nexport function* leftNavMenuWatcher() {\n  yield takeEvery(\n    toggleLeftNavMenuActionTypeName,\n    leftNavMenuWorkerWorker,\n  )\n}\n\nexport function* fetchAnimeWatcher() {\n  yield throttle(\n    500,\n    fetchAnimeActionTypeName,\n    fetchAnimeWorker,\n  )\n}\n\nexport function* fetchCategoryWatcher() {\n  yield takeLatest(\n    fetchCategoryActionTypeName,\n    fetchCategoryWorker,\n  )\n}\n\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport { rootReducer } from 'reducers/rootReducer';\nimport { initialState } from 'states/state';\nimport { StateType } from 'states/types';\nimport createSagaMiddleware from 'redux-saga'\nimport { rootSaga } from 'sideEffects/rootSaga'\n\n/**\n * middleware config\n **/\n// saga\nconst sagaMiddleware = createSagaMiddleware()\n\n// store middleware to array\nexport const middleware: any[] = [\n  sagaMiddleware  \n]\n\nconst composeEnhancers = (<any>window).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(rootReducer, initialState as StateType, composeEnhancers(\n    applyMiddleware(...middleware)\n));\n\n// run saga\n/**\n * you have to run sage AFTER 'createStore'\n **/\nsagaMiddleware.run(rootSaga)\n\n","import { all, call, spawn } from 'redux-saga/effects';\nimport { fetchAnimeWatcher, fetchCategoryWatcher, leftNavMenuWatcher } from './watchers';\n\nexport function* rootSaga() {\n\n  /**\n   *\n   * register watchers\n   *\n   **/\n  const sagas: any[] = [\n    leftNavMenuWatcher,\n    fetchAnimeWatcher,\n    fetchCategoryWatcher,\n  ];\n\n  /**\n   * keep everything (e.g., child tasks) alive \n   *   - disconnect all children watchers with this rootSaga \n   **/\n  yield all(sagas.map((saga) =>\n    spawn(function*() {\n      while (true) {\n        try {\n          yield call(saga)\n          break\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    }))\n  );\n\n}\n","import { createContext, useContext } from \"react\";\n\n\nexport declare type CssGlobalContextDataType = {\n  // headers\n  headerHeight: string;\n\n  // media\n  mobileSSize: number;\n  mobileLSize: number;\n  tabletSize: number;\n  laptopSize: number;\n  desktopSize: number;\n\n  // font-size\n  titleFontSize: string;\n  subTitleFontSize: string;\n  regularFontSize: string;\n  smallFontSize: string;\n  exSmallFontSize: string;\n\n  // color\n  mainColor: string;\n  secColor: string;\n  thirdColor: string;\n  borderColor: string;\n\n  successColor: string;\n  errorColor: string;\n  importantColor: string;\n  confirmationColor: string;\n}\n\nexport const CssGlobalContextDefaultState: CssGlobalContextDataType = {\n  // header\n  headerHeight: \"50px\",\n\n  // media\n  mobileSSize: 320,\n  mobileLSize: 425,\n  tabletSize: 768,\n  laptopSize: 1024,\n  desktopSize: 1440,\n\n  // font-size\n  titleFontSize: \"3em\",\n  subTitleFontSize: \"1.8em\",\n  regularFontSize: \"1.4em\",\n  smallFontSize: \"1.2em\",\n  exSmallFontSize: \"1em\",\n\n  mainColor: \"#fff\",\n  secColor: \"#000\",\n  thirdColor: \"#ED7171\",\n  borderColor: \"#7E7B7B\",\n\n  successColor: \"#45A845\",\n  errorColor: \"#DC3545\",\n  importantColor: \"#3B7CFE\",\n  confirmationColor: '#FE8176',\n}\n\n  \n// for provider \nexport const CssGlobalContext = createContext<CssGlobalContextDataType>(CssGlobalContextDefaultState);\n  \n// for consumer \nexport const useCssGlobalContext = () => {\n  return useContext(CssGlobalContext);\n} \n\n","import Content from 'components/pages/Content';\nimport { store } from 'configs/storeConfig';\nimport { CssGlobalContext, CssGlobalContextDefaultState } from 'contexts/cssGlobal';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { GlobalStyle } from 'ui/css/base';\n        \nconst Index = (props: any) => {\n\n  return (\n    <React.Fragment> \n      <GlobalStyle />\n      <CssGlobalContext.Provider value={CssGlobalContextDefaultState}>\n        <Provider store={store}>\n          <Router>\n            <Content />\n          </Router>\n        </Provider>\n      </CssGlobalContext.Provider>\n    </React.Fragment> \n  );\n};\n\nReactDOM.render(\n  <Index />\n  , document.getElementById('root')\n)\n\n","\nvar content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/postcss-loader/src/index.js??ref--8-2!../../../../../node_modules/sass-loader/dist/cjs.js!./style.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/postcss-loader/src/index.js??ref--8-2!../../../../../node_modules/sass-loader/dist/cjs.js!./style.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/postcss-loader/src/index.js??ref--8-2!../../../../../node_modules/sass-loader/dist/cjs.js!./style.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".loading-wrapper{display:flex;justify-content:center;align-items:center;width:100%;height:100%}.loading-box{text-align:center;color:#fff}.lds-ellipsis{vertical-align:middle;display:inline-block;position:relative;width:100px;height:100px}.lds-ellipsis div{position:absolute;top:calc(100px / 2 - 10px);width:calc(10px * 2);height:calc(10px * 2);border-radius:50%;background:#fff;-webkit-animation-timing-function:cubic-bezier(0, 1, 1, 0);animation-timing-function:cubic-bezier(0, 1, 1, 0)}.lds-ellipsis div:nth-child(1){left:0;-webkit-animation:lds-ellipsis1 0.6s infinite;animation:lds-ellipsis1 0.6s infinite}.lds-ellipsis div:nth-child(2){left:0;-webkit-animation:lds-ellipsis2 0.6s infinite;animation:lds-ellipsis2 0.6s infinite}.lds-ellipsis div:nth-child(3){left:calc(100px / 2 - 10px);-webkit-animation:lds-ellipsis2 0.6s infinite;animation:lds-ellipsis2 0.6s infinite}.lds-ellipsis div:nth-child(4){left:calc(100px - calc(10px * 2));-webkit-animation:lds-ellipsis3 0.6s infinite;animation:lds-ellipsis3 0.6s infinite}@-webkit-keyframes lds-ellipsis1{0%{transform:scale(0)}100%{transform:scale(1)}}@keyframes lds-ellipsis1{0%{transform:scale(0)}100%{transform:scale(1)}}@-webkit-keyframes lds-ellipsis3{0%{transform:scale(1)}100%{transform:scale(0)}}@keyframes lds-ellipsis3{0%{transform:scale(1)}100%{transform:scale(0)}}@-webkit-keyframes lds-ellipsis2{0%{transform:translate(0, 0)}100%{transform:translate(calc(100px / 2 - 10px), 0)}}@keyframes lds-ellipsis2{0%{transform:translate(0, 0)}100%{transform:translate(calc(100px / 2 - 10px), 0)}}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n"],"sourceRoot":""}